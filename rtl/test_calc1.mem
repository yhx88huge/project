/// Verilog Memory Initialization File (.mem) generated by ./ex3_asm

/// 12-bit address
/// 16-bit data

// interrupt entry point
@000 0000	///      ST0: 0000 [0000]: (    0:    0)          	// interrupt return address
@001 4028	///           0001 [4028]: BUN 028   (    I_HND)	// goto I_HND (interrupt handler)
// program entry point
// initialize data
@010 213a	///      INI: 0010 [213a]: LDA 13a   (      VH8)	// AC <- 1000
@011 f008	///           0011 [f008]: IMK                  	// IMSK <- 1000 (S_IN enabled)
@012 f020	///           0012 [f020]: SIO                  	// IOT <- 1 (serial-IO selected)
// initialize
@013 7800	///           0013 [7800]: CLA                  	// AC <- 0
@014 312b	///           0014 [312b]: STA 12b   (      BYE)	// M[BYE] <- 0
@015 312c	///           0015 [312c]: STA 12c   (  NXT_BYE)	// M[NXT_BYE] <- 0
@016 312e	///           0016 [312e]: STA 12e   (        X)	// M[X] <- 0
@017 2146	///           0017 [2146]: LDA 146   (    CH_EQ)	// AC <- '='
@018 312d	///           0018 [312d]: STA 12d   (      OPR)	// M[OPR] <- '='
@019 501f	///           0019 [501f]: BSA 01f   (   INI_ST)	// call INI_ST (initialize state)
@01a f080	///           001a [f080]: ION                  	// enable interrupt
// wait until (M[BYE] = 1)
@01b 212b	///       L0: 001b [212b]: LDA 12b   (      BYE)	// AC <- M[BYE]
@01c 7004	///           001c [7004]: SZA                  	// (M[BYE] == 0) ? skip next
@01d 7001	///           001d [7001]: HLT                  
@01e 401b	///           001e [401b]: BUN 01b   (       L0)	// goto L0
@01f 0000	///   INI_ST: 001f [0000]: (    0:    0)          
/////////// subroutine (initialize state) ///////////
@020 7800	///           0020 [7800]: CLA                  	// AC      <- 0
@021 312f	///           0021 [312f]: STA 12f   (        Y)	// M[Y]    <- 0
@022 3130	///           0022 [3130]: STA 130   (     Y_PD)	// M[Y_PD] <- 0
@023 3132	///           0023 [3132]: STA 132   (      STT)	// M[STT]  <- 0
@024 3133	///           0024 [3133]: STA 133   (  OUT_STT)	// M[OUT_STT] <- 0
@025 213e	///           0025 [213e]: LDA 13e   (      VM4)	// AC      <- M[VM4] (-4)
@026 3131	///           0026 [3131]: STA 131   (      CNT)	// M[CNT]  <- -4
@027 c01f	///           0027 [c01f]: BUN 01f I (   INI_ST)	// return from INI_ST
//////////// interrupt handler ///////////
// store AC & E to memory
@028 3128	///    I_HND: 0028 [3128]: STA 128   (       BA)	// M[BA] <- AC	(store AC)
@029 7040	///           0029 [7040]: CIL                  	// AC[0] <- E	(AC[15:1] is not important here...)
@02a 3129	///           002a [3129]: STA 129   (       BE)	// M[BE] <- AC	(store E)
//////////// state machine ///////////
// M[OUT_STT] != 0  : output pending
// M[STT] = 0  : read hex inputs (up to 4 hex digits)
// M[STT] = 1  : read operator (+,-,= : compute, others : end program...)
// M[STT] >= 2 : output message
// check state :
@02b 2133	///           002b [2133]: LDA 133   (  OUT_STT)	// AC <- M[OUT_STT]
@02c 7004	///           002c [7004]: SZA                  	// (M[OUT_STT] = 0) ? skip next
@02d 4103	///           002d [4103]: BUN 103   (  PUT_OUT)	// goto PUT_OUT (process output)
//////////// process input ///////////
// input mode (M[TMI] <- INPR)
@02e f200	///           002e [f200]: SKI                  	// (FGI = 0) ? skip next
@02f 4046	///           002f [4046]: BUN 046   (      IRT)	// goto IRT (return from interrupt handler) --> this should not happen...
@030 7800	///           0030 [7800]: CLA                  	// AC <- 0
@031 f800	///           0031 [f800]: INP                  	// AC[7:0] <- INPR
@032 3126	///           0032 [3126]: STA 126   (      TMI)	// M[TMI] <- INPR
@033 50b4	///           0033 [50b4]: BSA 0b4   (  READ_HX)	// call READ_HX (read hex value to M[HXI](3:0))
@034 7010	///           0034 [7010]: SPA                  	// (AC >= 0) ? skip next
@035 405d	///           0035 [405d]: BUN 05d   (    STT_1)	// goto STT_1 (non-hex input)
// hex input :
// check state 0 :
@036 2132	///           0036 [2132]: LDA 132   (      STT)	// AC <- M[STT]
@037 7004	///           0037 [7004]: SZA                  	// (AC = 0) ? skip next
@038 404b	///           0038 [404b]: BUN 04b   (      ERR)	// goto ERR (error!!!)
//////////// state 0: read operand 1,2 ///////////
@039 212f	///           0039 [212f]: LDA 12f   (        Y)	// AC <- M[Y]
@03a 7040	///           003a [7040]: CIL                  
@03b 7040	///           003b [7040]: CIL                  
@03c 7040	///           003c [7040]: CIL                  
@03d 7040	///           003d [7040]: CIL                  	// AC <- (M[Y] << 4) 
@03e 0134	///           003e [0134]: AND 134   (      AMK)	// AC <- AC & AMK (FFF0)
@03f 1127	///           003f [1127]: ADD 127   (      HXI)	// AC <- AC + M[HXI]
@040 312f	///           0040 [312f]: STA 12f   (        Y)	// M[Y] <- AC
@041 2136	///           0041 [2136]: LDA 136   (      VH1)	// AC <- M[VH1] (1)
@042 3130	///           0042 [3130]: STA 130   (     Y_PD)	// M[Y_PD] <- 1
@043 6131	///           0043 [6131]: ISZ 131   (      CNT)	// ((++M[CNT]) = 0) ? skip next
// operand digit pending
@044 4046	///           0044 [4046]: BUN 046   (      IRT)	// goto IRT (return from interrupt handler)
// goto state 1 :
@045 6132	///           0045 [6132]: ISZ 132   (      STT)	// ++M[STT] (no skip)
//////////// return from interrupt handler ///////////
@046 2129	///      IRT: 0046 [2129]: LDA 129   (       BE)	// AC <- M[BE]
@047 7080	///           0047 [7080]: CIR                  	// E  <- AC[0]	(restore E)
@048 2128	///           0048 [2128]: LDA 128   (       BA)	// AC <- M[BA]	(restore AC)
@049 f080	///           0049 [f080]: ION                  	// IEN <- 1		(enable interrupt)
@04a c000	///           004a [c000]: BUN 000 I (      ST0)	// indirect return (return address stored in ST0)
//////////// error !!!! ///////////
@04b 7800	///      ERR: 004b [7800]: CLA                  	// AC <- 0
@04c 312e	///           004c [312e]: STA 12e   (        X)	// M[X] <- 0
@04d 312f	///           004d [312f]: STA 12f   (        Y)	// M[Y] <- 0
@04e 214f	///           004e [214f]: LDA 14f   (    A_EMG)	// AC <- M[A_EMG] (EMG)
@04f 50ad	///           004f [50ad]: BSA 0ad   (  SET_MSG)	// call SET_MSG (set message info)
//////////// prepare output ///////////
@050 2136	///  PRP_OUT: 0050 [2136]: LDA 136   (      VH1)	// AC <- M[VH1] (2)
@051 3133	///           0051 [3133]: STA 133   (  OUT_STT)	// M[OUT_STT] <- 1 (output state)
@052 2139	///           0052 [2139]: LDA 139   (      VH4)	// AC <- 0100
@053 f008	///           0053 [f008]: IMK                  	// IMSK <- 0100 (S_OUT enabled)
@054 4046	///           0054 [4046]: BUN 046   (      IRT)	// goto IRT (return from interrupt handler)
@055 0000	///   CHK_CH: 0055 [0000]: (    0:    0)          	// return address
/////////// subroutine (check character) ///////////
// arg0 (AC) : character to identify
// return AC = 1 : character matched
// return AC = 0 : character not matched
@056 7200	///           0056 [7200]: CMA                  	// AC <- ~AC
@057 7020	///           0057 [7020]: INC                  	// AC <- AC + 1 (AC = - arg0)
@058 1126	///           0058 [1126]: ADD 126   (      TMI)	// AC <- AC + M[TMI] (M[TMI] - arg0)
@059 7004	///           0059 [7004]: SZA                  	// (M[TMI] = arg0) ? skip next
@05a 213c	///           005a [213c]: LDA 13c   (      VM1)	// AC <- M[VM1] (-1) (no match)
@05b 7020	///           005b [7020]: INC                  	// AC <- AC + 1
@05c c055	///           005c [c055]: BUN 055 I (   CHK_CH)	// return from CHK_CH
//////////// state 1: read operator ///////////
// cur-operator : M[TMI]
// (cur-operator = ' ') ?
@05d 2145	///    STT_1: 005d [2145]: LDA 145   (    CH_WS)	// AC <- M[CH_WS] (' ')
@05e 5055	///           005e [5055]: BSA 055   (   CHK_CH)	// call CHK_CH (check character)
@05f 7004	///           005f [7004]: SZA                  	// (AC = 0) ? skip next (not white-space)
@060 4072	///           0060 [4072]: BUN 072   (   STT_WS)	// goto STT_WS (handle white-space)
// (cur-operator = '=') ?
@061 2146	///           0061 [2146]: LDA 146   (    CH_EQ)	// AC <- M[CH_EQ] ('=')
@062 5055	///           0062 [5055]: BSA 055   (   CHK_CH)	// call CHK_CH (check character)
@063 7004	///           0063 [7004]: SZA                  	// (AC = 0) ? skip next (not '=')
@064 4079	///           0064 [4079]: BUN 079   ( STT_COMP)	// goto STT_COMP (compute on prev-operator)
// (cur-operator = '+') ?
@065 2147	///           0065 [2147]: LDA 147   (    CH_PL)	// AC <- M[CH_PL] ('+')
@066 5055	///           0066 [5055]: BSA 055   (   CHK_CH)	// call CHK_CH (check character)
@067 7004	///           0067 [7004]: SZA                  	// (AC = 0) ? skip next (not '+')
@068 4079	///           0068 [4079]: BUN 079   ( STT_COMP)	// goto STT_COMP (compute on prev-operator)
// (cur-operator = '-') ?
@069 2148	///           0069 [2148]: LDA 148   (    CH_MN)	// AC <- M[CH_MN] ('-')
@06a 5055	///           006a [5055]: BSA 055   (   CHK_CH)	// call CHK_CH (check character)
@06b 7004	///           006b [7004]: SZA                  	// (AC = 0) ? skip next (not '-')
@06c 4079	///           006c [4079]: BUN 079   ( STT_COMP)	// goto STT_COMP (compute on prev-operator)
// (cur-operator is unsupported... : prepare to terminate this program)
@06d 2136	///           006d [2136]: LDA 136   (      VH1)	// AC <- M[VH1] (1)
@06e 312c	///           006e [312c]: STA 12c   (  NXT_BYE)	// M[NXT_BYE] <- 1
@06f 2157	///           006f [2157]: LDA 157   (    A_BMG)	// AC <- M[A_BMG] (BMG)
@070 50ad	///           0070 [50ad]: BSA 0ad   (  SET_MSG)	// call SET_MSG (set message info)
@071 4050	///           0071 [4050]: BUN 050   (  PRP_OUT)
// current input is white-space : check (M[Y_PD] = 1) ?
@072 2130	///   STT_WS: 0072 [2130]: LDA 130   (     Y_PD)	// AC <- M[Y_PD]
@073 113c	///           0073 [113c]: ADD 13c   (      VM1)	// AC <- M[Y_PD] - 1
@074 7004	///           0074 [7004]: SZA                  	// (M[Y_PD] - 1 = 0) ? skip next
// no pending input
@075 4046	///           0075 [4046]: BUN 046   (      IRT)	// goto IRT (return from interrupt handler)
// set STT <- 1 on white-space on pending input (M[Y_PD] = 1)
@076 2136	///           0076 [2136]: LDA 136   (      VH1)	// AC <- M[VH1] (1)
@077 3132	///           0077 [3132]: STA 132   (      STT)	// M[STT] <- 1
@078 4046	///           0078 [4046]: BUN 046   (      IRT)	// goto IRT (return from interrupt handler)
// compute on prev-operator
// swap M[OPR] (prev-operator) <-> M[TMI] (cur-operator)
@079 212d	/// STT_COMP: 0079 [212d]: LDA 12d   (      OPR)	// AC     <- M[OPR]
@07a 3124	///           007a [3124]: STA 124   (      TMA)	// M[TMA] <- M[OPR]
@07b 2126	///           007b [2126]: LDA 126   (      TMI)	// AC     <- M[TMI]
@07c 312d	///           007c [312d]: STA 12d   (      OPR)	// M[OPR] <- M[TMI]
@07d 2124	///           007d [2124]: LDA 124   (      TMA)	// AC     <- M[TMA]
@07e 3126	///           007e [3126]: STA 126   (      TMI)	// M[TMI] <- M[TMA]
// (M[Y_PD] = 0) ?
@07f 2130	///           007f [2130]: LDA 130   (     Y_PD)	// AC <- M[Y_PD]
@080 7004	///           0080 [7004]: SZA                  	// (M[Y_PD] = 0) ? skip next
@081 4084	///           0081 [4084]: BUN 084   (   CHK_OP)	// goto CHK_OP (check prev-operator)
// no input at M[Y] : copy M[X] to M[Y]
@082 212e	///           0082 [212e]: LDA 12e   (        X)	// AC   <- M[X]
@083 312f	///           0083 [312f]: STA 12f   (        Y)	// M[Y] <- M[X]
// skip-output flag = 0
@084 7800	///   CHK_OP: 0084 [7800]: CLA                  	// AC     <- 0
@085 3124	///           0085 [3124]: STA 124   (      TMA)	// M[TMA] <- 0 (skip-output flag = 0)
// (prev-operator = '=') ?
@086 2146	///           0086 [2146]: LDA 146   (    CH_EQ)	// AC <- M[CH_EQ] ('=')
@087 5055	///           0087 [5055]: BSA 055   (   CHK_CH)	// call CHK_CH
@088 7004	///           0088 [7004]: SZA                  	// (AC = 0) ? skip next
@089 4093	///           0089 [4093]: BUN 093   (     C_EQ)	// goto C_EQ (compute EQUAL)
// (prev-operator = '+') ?
@08a 2147	///           008a [2147]: LDA 147   (    CH_PL)	// AC <- M[CH_PL] ('+')
@08b 5055	///           008b [5055]: BSA 055   (   CHK_CH)	// call CHK_CH
@08c 7004	///           008c [7004]: SZA                  	// (AC = 0) ? skip next
@08d 4096	///           008d [4096]: BUN 096   (    C_ADD)	// goto C_ADD (compute ADD)
// (prev-operator = '-') ?
@08e 2148	///           008e [2148]: LDA 148   (    CH_MN)	// AC <- M[CH_PL] ('-')
@08f 5055	///           008f [5055]: BSA 055   (   CHK_CH)	// call CHK_CH
@090 7004	///           0090 [7004]: SZA                  	// (AC = 0) ? skip next
@091 4099	///           0091 [4099]: BUN 099   (    C_SUB)	// goto C_SUB (compute SUB)
// (prev-operator is unsupported) ?
@092 409e	///           0092 [409e]: BUN 09e   (   C_NONE)	// goto C_NONE (unsupported operator)
// EQUAL : M[Z] <- M[Y]
@093 6124	///     C_EQ: 0093 [6124]: ISZ 124   (      TMA)	// ++M[TMA] (no skip) : skip-output flag = 1
@094 212f	///           0094 [212f]: LDA 12f   (        Y)	// AC     <- M[Y]
@095 409f	///           0095 [409f]: BUN 09f   (    STA_Z)	// goto STA_Z
// ADD : M[Z] <- M[X] + M[Y]
@096 212e	///    C_ADD: 0096 [212e]: LDA 12e   (        X)	// AC <- M[X]
@097 112f	///           0097 [112f]: ADD 12f   (        Y)	// AC <- M[X] + M[Y]
@098 409f	///           0098 [409f]: BUN 09f   (    STA_Z)	// goto STA_Z
// SUB : M[Z] <- M[X] - M[Y]
@099 212f	///    C_SUB: 0099 [212f]: LDA 12f   (        Y)	// AC <- M[Y]
@09a 7200	///           009a [7200]: CMA                  	// AC <- ~AC
@09b 7020	///           009b [7020]: INC                  	// AC <- AC + 1 (-M[Y])
@09c 112e	///           009c [112e]: ADD 12e   (        X)	// AC <- M[X] - M[Y]
@09d 409f	///           009d [409f]: BUN 09f   (    STA_Z)	// goto STA_Z
@09e 7800	///   C_NONE: 009e [7800]: CLA                  	// AC <- 0 (just for now...)
@09f 3123	///    STA_Z: 009f [3123]: STA 123   (        Z)	// M[Z] <- AC
@0a0 312e	///           00a0 [312e]: STA 12e   (        X)	// M[X] <- M[Z]
@0a1 7800	///           00a1 [7800]: CLA                  	// AC <- 0
@0a2 312f	///           00a2 [312f]: STA 12f   (        Y)	// M[Y] <- 0
@0a3 3130	///           00a3 [3130]: STA 130   (     Y_PD)	// M[Y_PD] <- 0
// check skip-output flag
@0a4 2124	///           00a4 [2124]: LDA 124   (      TMA)	// AC <- M[TMA] (skip-output flag)
@0a5 7004	///           00a5 [7004]: SZA                  	// (AC = 0) ? skip next (prev-operator != '=')
@0a6 40ab	///           00a6 [40ab]: BUN 0ab   ( SKIP_OUT)	// goto SKIP_OUT (prev-operator = '=')
// write Z to Z_MSG
@0a7 50e6	///           00a7 [50e6]: BSA 0e6   (  WRITE_Z)	// call WRITE_Z (write Z to Z_MSG)
@0a8 2149	///           00a8 [2149]: LDA 149   (    A_ZMG)	// AC <- M[A_ZMG] (ZMG)
@0a9 50ad	///           00a9 [50ad]: BSA 0ad   (  SET_MSG)	// call SET_MSG (set message info)
@0aa 4050	///           00aa [4050]: BUN 050   (  PRP_OUT)
// prev-operator is '=' : skip output
@0ab 501f	/// SKIP_OUT: 00ab [501f]: BSA 01f   (   INI_ST)	// call INI_ST (initialize state)
@0ac 4046	///           00ac [4046]: BUN 046   (      IRT)	// goto IRT (return from interrupt handler)
@0ad 0000	///  SET_MSG: 00ad [0000]: (    0:    0)          
/////////// subroutine (set message info) //////////
// arg0 (AC) : message address
@0ae 312a	///           00ae [312a]: STA 12a   (   PTR_MG)	// M[PTR_MG] <- arg0 (message address)
@0af 113c	///           00af [113c]: ADD 13c   (      VM1)	// AC <- arg0 - 1
@0b0 3124	///           00b0 [3124]: STA 124   (      TMA)	// M[TMA] <- arg0 - 1
@0b1 a124	///           00b1 [a124]: LDA 124 I (      TMA)	// AC <- M[M[TMA]] (M[arg0 - 1] = message count)
@0b2 3131	///           00b2 [3131]: STA 131   (      CNT)	// M[CNT] <- message count
@0b3 c0ad	///           00b3 [c0ad]: BUN 0ad I (  SET_MSG)	// return from SET_MSG
@0b4 0000	///  READ_HX: 00b4 [0000]: (    0:    0)          	// return addess
/////////// subroutine (read hex value) //////////
// return AC >= 0 : valid hex value in M[HXI](3:0)
// return AC < 0  :  raw INPR value in M[TMI](7:0)
// check '0' <= M[TMI] <= '9'
@0b5 2140	///           00b5 [2140]: LDA 140   (     CH_0)	// AC <- M[CH_0] ('0')
@0b6 50d4	///           00b6 [50d4]: BSA 0d4   (  CHK_DGT)	// call CHK_DGT (check digit character)
@0b7 0000	///           00b7 [0000]: (    0:    0)          	// 2nd argument to CHK_DGT (offset)
@0b8 0009	///           00b8 [0009]: (    9:    9)          	// 3rd argument to CHK_DGT (upper bound)
@0b9 7008	///           00b9 [7008]: SNA                  	// (AC < 0) ? skip next
@0ba c0b4	///           00ba [c0b4]: BUN 0b4 I (  READ_HX)	// return from RHX (M[HXI](3:0) = {0 to 9})
// check 'a' <= M[TMI] <= 'f'
@0bb 2142	///           00bb [2142]: LDA 142   (    CH_LA)	// AC <= M[CH_LA] ('a')
@0bc 50d4	///           00bc [50d4]: BSA 0d4   (  CHK_DGT)	// call CHK_DGT (check digit character)
@0bd 000a	///           00bd [000a]: (   10:   10)          	// 2nd argument to CHK_DGT (offset)
@0be 0005	///           00be [0005]: (    5:    5)          	// 3rd argument to CHK_DGT (upper bound)
@0bf 7008	///           00bf [7008]: SNA                  	// (AC < 0) ? skip next
@0c0 c0b4	///           00c0 [c0b4]: BUN 0b4 I (  READ_HX)	// return from RHX (M[HXI](3:0) = {a to f})
// check 'A' <= M[TMI] <= 'F'
@0c1 2141	///           00c1 [2141]: LDA 141   (    CH_UA)	// AC <= M[CH_UA] ('A')
@0c2 50d4	///           00c2 [50d4]: BSA 0d4   (  CHK_DGT)	// call CHK_DGT (check digit character)
@0c3 000a	///           00c3 [000a]: (   10:   10)          	// 2nd argument to CHK_DGT (offset)
@0c4 0005	///           00c4 [0005]: (    5:    5)          	// 3rd argument to CHK_DGT (upper bound)
@0c5 7008	///           00c5 [7008]: SNA                  	// (AC < 0) ? skip next
@0c6 c0b4	///           00c6 [c0b4]: BUN 0b4 I (  READ_HX)	// return from RHX (M[HXI](3:0) = {A to F})
// not hex value --> convert new-line (\n) and carrage-return (\r) to equal (=)
@0c7 2143	///           00c7 [2143]: LDA 143   (    CH_NL)	// AC <- M[CH_NL] ('\n')
@0c8 5055	///           00c8 [5055]: BSA 055   (   CHK_CH)	// call CHK_CH
@0c9 7004	///           00c9 [7004]: SZA                  	// (AC = 0) ? skip next
@0ca 40d1	///           00ca [40d1]: BUN 0d1   (  CONV_EQ)	// goto CONV_EQ (convert to EQUAL)
@0cb 2144	///           00cb [2144]: LDA 144   (    CH_CR)	// AC <- M[CH_CR] ('\r')
@0cc 5055	///           00cc [5055]: BSA 055   (   CHK_CH)	// call CHK_CH
@0cd 7004	///           00cd [7004]: SZA                  	// (AC = 0) ? skip next
@0ce 40d1	///           00ce [40d1]: BUN 0d1   (  CONV_EQ)	// goto CONV_EQ (convert to EQUAL)
@0cf 213c	///R_READ_HX: 00cf [213c]: LDA 13c   (      VM1)	// AC <- M[VM1] (-1)
@0d0 c0b4	///           00d0 [c0b4]: BUN 0b4 I (  READ_HX)	// return from RHX (not hex value)
@0d1 2146	///  CONV_EQ: 00d1 [2146]: LDA 146   (    CH_EQ)	// AC <- M[CH_EQ] ('=')
@0d2 3126	///           00d2 [3126]: STA 126   (      TMI)	// M[TMI] <- '='
@0d3 40cf	///           00d3 [40cf]: BUN 0cf   (R_READ_HX)	// goto R_READ_HX (return : not hex value)
@0d4 0000	///  CHK_DGT: 00d4 [0000]: (    0:    0)          	// return address
/////////// subroutine (check digit character) //////////
// arg0 (AC) : lower bound character
// arg1 (M[M[CHK_DGT]]) : offset
// arg2 (M[M[CHK_DGT]+1]) : upper bound value
// return AC >= 0 : valid digit value in M[HXI](3:0)
// return AC < 0  : not valid digit
// check (M[TMI] >= lower bound)
@0d5 7200	///           00d5 [7200]: CMA                  	// AC <- ~AC
@0d6 7020	///           00d6 [7020]: INC                  	// AC <- AC + 1 (- arg0)
@0d7 1126	///           00d7 [1126]: ADD 126   (      TMI)	// AC <- AC + M[TMI] (M[TMI] - arg0)
@0d8 7010	///           00d8 [7010]: SPA                  	// (AC = M[TMI] - arg0 >= 0) ? skip next
@0d9 40e3	///           00d9 [40e3]: BUN 0e3   (   R_CHK1)	// goto R_CHK1 (return : AC < 0)
@0da 3124	///           00da [3124]: STA 124   (      TMA)	// M[TMA] <- M[TMI] - arg0
@0db 90d4	///           00db [90d4]: ADD 0d4 I (  CHK_DGT)	// AC <- M[TMI] - arg0 + arg1
@0dc 3127	///           00dc [3127]: STA 127   (      HXI)	// M[HXI] <- M[TMI] - arg0 + arg1 (actual hex value)
@0dd 60d4	///           00dd [60d4]: ISZ 0d4   (  CHK_DGT)	// ++M[CHK_DGT]
// check (M[TMI] <= upper bound)
@0de 2124	///           00de [2124]: LDA 124   (      TMA)	// AC <- M[TMA] (M[TMI] - arg0)
@0df 7200	///           00df [7200]: CMA                  	// AC <- ~AC
@0e0 7020	///           00e0 [7020]: INC                  	// AC <- AC + 1 (arg0 - M[TMI])
@0e1 90d4	///           00e1 [90d4]: ADD 0d4 I (  CHK_DGT)	// AC <- arg2 - arg0 - M[TMI] (if (AC < 0) then not within bound)
@0e2 40e4	///           00e2 [40e4]: BUN 0e4   (   R_CHK2)	// goto R_CHK2
@0e3 60d4	///   R_CHK1: 00e3 [60d4]: ISZ 0d4   (  CHK_DGT)	// ++M[CHK_DGT]
@0e4 60d4	///   R_CHK2: 00e4 [60d4]: ISZ 0d4   (  CHK_DGT)	// ++M[CHK_DGT]
@0e5 c0d4	///           00e5 [c0d4]: BUN 0d4 I (  CHK_DGT)	// return from CHK_DGT
@0e6 0000	///  WRITE_Z: 00e6 [0000]: (    0:    0)          	// return address
/////////// subroutine (write Z to ZMG) //////////
@0e7 2149	///           00e7 [2149]: LDA 149   (    A_ZMG)	// AC <- M[A_ZMG] (ZMG)
@0e8 1138	///           00e8 [1138]: ADD 138   (      VH3)	// AC <- ZMG + 3
@0e9 3124	///           00e9 [3124]: STA 124   (      TMA)	// M[TMA] <- ZMG + 3
@0ea 213e	///           00ea [213e]: LDA 13e   (      VM4)	// AC <- M[VM4] (-4)
@0eb 3131	///           00eb [3131]: STA 131   (      CNT)	// M[CNT] <- -4
@0ec 2123	///  PUT_DGT: 00ec [2123]: LDA 123   (        Z)	// AC <- M[Z]
@0ed 0135	///           00ed [0135]: AND 135   (     AMKN)	// AC <- AC & 000f
@0ee 3125	///           00ee [3125]: STA 125   (      TMB)	// M[TMB] <- M[Z] & 000f
@0ef 113f	///           00ef [113f]: ADD 13f   (     VM10)	// AC <- AC - 10
@0f0 7008	///           00f0 [7008]: SNA                  	// (AC < 0) skip next
@0f1 4101	///           00f1 [4101]: BUN 101   (  PUT_HEX)	// goto PUT_HEX
// put 0 - 9:
@0f2 2125	///           00f2 [2125]: LDA 125   (      TMB)	// AC <- M[Z] & 000f
@0f3 1140	///           00f3 [1140]: ADD 140   (     CH_0)	// AC <- (M[Z] & 000f) + '0'
@0f4 b124	///  STR_DGT: 00f4 [b124]: STA 124 I (      TMA)	// M[M[TMA]] <- AC
@0f5 2123	///           00f5 [2123]: LDA 123   (        Z)	// AC <- M[Z]
@0f6 7080	///           00f6 [7080]: CIR                  
@0f7 7080	///           00f7 [7080]: CIR                  
@0f8 7080	///           00f8 [7080]: CIR                  
@0f9 7080	///           00f9 [7080]: CIR                  	// AC <- M[Z] >> 4
@0fa 3123	///           00fa [3123]: STA 123   (        Z)	// M[Z] <- M[Z] >> 4
@0fb 2124	///           00fb [2124]: LDA 124   (      TMA)	// AC <- M[TMA]
@0fc 113c	///           00fc [113c]: ADD 13c   (      VM1)	// AC <- M[TMA] - 1
@0fd 3124	///           00fd [3124]: STA 124   (      TMA)	// M[TMA] <- M[TMA] - 1
@0fe 6131	///           00fe [6131]: ISZ 131   (      CNT)	// ((++M[CNT]) = 0) ? skip next
@0ff 40ec	///           00ff [40ec]: BUN 0ec   (  PUT_DGT)	// goto PUT_DGT
@100 c0e6	///           0100 [c0e6]: BUN 0e6 I (  WRITE_Z)	// return from OUT_Z
@101 1141	///  PUT_HEX: 0101 [1141]: ADD 141   (    CH_UA)	// AC <- (M[Z] & 000f) + 'A'
@102 40f4	///           0102 [40f4]: BUN 0f4   (  STR_DGT)	// goto STR_DGT
/////////// process output //////////
@103 f100	///  PUT_OUT: 0103 [f100]: SKO                  	// (FGO = 0) ? skip next
@104 4046	///           0104 [4046]: BUN 046   (      IRT)	// goto IRT (return from interrupt handler) --> this should not happen...
// here, AC = M[OUT_STT] : 
@105 113c	///           0105 [113c]: ADD 13c   (      VM1)	// AC <- M[OUT_STT] - 1
@106 7004	///           0106 [7004]: SZA                  	// (M[OUT_STT] = 1) ? skip next
@107 410c	///           0107 [410c]: BUN 10c   (PUT_OUT_2)	// goto PUT_O2
// M[OUT_STT] = 1 : put 1st newline 
@108 2143	///           0108 [2143]: LDA 143   (    CH_NL)	// AC <- M[CH_NL] ('\n')
@109 f400	///           0109 [f400]: OUT                  	// OUTR <- AC(7:0)
@10a 6133	///           010a [6133]: ISZ 133   (  OUT_STT)	// ++M[OUT_STT] (no skip)
@10b 4046	///           010b [4046]: BUN 046   (      IRT)	// goto IRT (return from interrupt handler)
// check (M[OUT_STT] = 2) ?
@10c 113c	///PUT_OUT_2: 010c [113c]: ADD 13c   (      VM1)	// AC <- M[OUT_STT] - 1 - 1
@10d 7004	///           010d [7004]: SZA                  	// (M[OUT_STT] = 2) ? skip next
@10e 4116	///           010e [4116]: BUN 116   (  PUT_NL2)	// goto PUT_NL2
// M[OUT_STT] = 2 : put message
@10f a12a	///           010f [a12a]: LDA 12a I (   PTR_MG)	// AC <- M[M[PTR_MG]]
@110 f400	///           0110 [f400]: OUT                  	// OUTR <- AC(7:0)
@111 612a	///           0111 [612a]: ISZ 12a   (   PTR_MG)	// ++M[PTR_MG] (no skip)
@112 6131	///           0112 [6131]: ISZ 131   (      CNT)	// (++M[CNT])= 0) ? skip next
@113 4046	///           0113 [4046]: BUN 046   (      IRT)	// goto IRT (return from interrupt handler)
@114 6133	///           0114 [6133]: ISZ 133   (  OUT_STT)	// ++M[OUT_STT] (no skip)
@115 4046	///           0115 [4046]: BUN 046   (      IRT)	// goto IRT (return from interrupt handler)
// M[OUT_STT] = 3 : put 2nd newline (process output ends here...)
@116 2143	///  PUT_NL2: 0116 [2143]: LDA 143   (    CH_NL)	// AC <- M[CH_NL] ('\n')
@117 f400	///           0117 [f400]: OUT                  	// OUTR <- AC(7:0)
@118 501f	///           0118 [501f]: BSA 01f   (   INI_ST)	// call INI_ST (initialize state)
@119 212c	///           0119 [212c]: LDA 12c   (  NXT_BYE)	// AC <- M[NXT_BYE]
@11a 312b	///           011a [312b]: STA 12b   (      BYE)	// M[BYE] <- M[NXT_BYE]
@11b 7004	///           011b [7004]: SZA                  	// (M[NXT_BYE] == 0) ? skip next
@11c 4120	///           011c [4120]: BUN 120   (      EXT)	// goto EXT (disable all interrupts)
@11d 213a	///           011d [213a]: LDA 13a   (      VH8)	// AC <- 1000
@11e f008	///           011e [f008]: IMK                  	// IMK <- 1000 (S_IN enabled)
@11f 4046	///           011f [4046]: BUN 046   (      IRT)	// goto IRT (return from interrupt handler)
@120 7800	///      EXT: 0120 [7800]: CLA                  	// AC <- 0
@121 f008	///           0121 [f008]: IMK                  	// IMK <- 0000 (all interrupts disabled)
@122 4046	///           0122 [4046]: BUN 046   (      IRT)	// goto IRT (return from interrupt handler)
// data (no initialization)
@123 0000	///        Z: 0123 [0000]: (    0:    0)          	// result
@124 0000	///      TMA: 0124 [0000]: (    0:    0)          	// temporal
@125 0000	///      TMB: 0125 [0000]: (    0:    0)          	// temporal
@126 0000	///      TMI: 0126 [0000]: (    0:    0)          	// char (raw) input
@127 0000	///      HXI: 0127 [0000]: (    0:    0)          	// hex input
@128 0000	///       BA: 0128 [0000]: (    0:    0)          	// backup storage for AC during interrupt handling
@129 0000	///       BE: 0129 [0000]: (    0:    0)          	// backup storage for  E during interrupt handling
@12a 0000	///   PTR_MG: 012a [0000]: (    0:    0)          	// message pointer
// data (need initialization code : one-time)
@12b 0000	///      BYE: 012b [0000]: (    0:    0)          	// (init: 0) bye
@12c 0000	///  NXT_BYE: 012c [0000]: (    0:    0)          	// (init: 0) next bye
@12d 0000	///      OPR: 012d [0000]: (    0:    0)          	// (init: 0) operator
@12e 0000	///        X: 012e [0000]: (    0:    0)          	// (init: 0) X operand
// data (need initialization code : after every output -> INI_ST)
@12f 0000	///        Y: 012f [0000]: (    0:    0)          	// (init: 0) Y operand
@130 0000	///     Y_PD: 0130 [0000]: (    0:    0)          	// (init: 0) Y pending
@131 0000	///      CNT: 0131 [0000]: (    0:    0)          	// (init: -4) digit count
@132 0000	///      STT: 0132 [0000]: (    0:    0)          	// (init: 0) 0: read operand, 1: read operator
@133 0000	///  OUT_STT: 0133 [0000]: (    0:    0)          	// (init: 0) 0: output 1st newline, 1: output ans, 2: output 2nd newline
// data (read-only)
@134 fff0	///      AMK: 0134 [fff0]: (  -16:65520)          	// AMK = FFF0 (and mask)
@135 000f	///     AMKN: 0135 [000f]: (   15:   15)          	// AMKN = 000F (and mask negated)
@136 0001	///      VH1: 0136 [0001]: (    1:    1)          	// VH1 = 1
@137 0002	///      VH2: 0137 [0002]: (    2:    2)          	// VH2 = 2
@138 0003	///      VH3: 0138 [0003]: (    3:    3)          	// VH3 = 3
@139 0004	///      VH4: 0139 [0004]: (    4:    4)          	// VH4 = 4
@13a 0008	///      VH8: 013a [0008]: (    8:    8)          	// VH8 = 8
@13b 000a	///      VHA: 013b [000a]: (   10:   10)          	// VHA = A
@13c ffff	///      VM1: 013c [ffff]: (   -1:65535)          	// VM1 = -1
@13d fffe	///      VM2: 013d [fffe]: (   -2:65534)          	// VM2 = -2
@13e fffc	///      VM4: 013e [fffc]: (   -4:65532)          	// VM2 = -4
@13f fff6	///     VM10: 013f [fff6]: (  -10:65526)          	// VM10 = -10
@140 0030	///     CH_0: 0140 [0030]: (   48:  '0')          	// '0'
@141 0041	///    CH_UA: 0141 [0041]: (   65:  'A')          	// 'A'
@142 0061	///    CH_LA: 0142 [0061]: (   97:  'a')          	// 'a'
@143 000a	///    CH_NL: 0143 [000a]: (   10:   10)          	// '\n' (newline : line feed)
@144 000d	///    CH_CR: 0144 [000d]: (   13:   13)          	// '\r' (carrage return : appears on DOS)
@145 0020	///    CH_WS: 0145 [0020]: (   32:  ' ')          	// ' ' (white space)
@146 003d	///    CH_EQ: 0146 [003d]: (   61:  '=')          	// '=' (equal)
@147 002b	///    CH_PL: 0147 [002b]: (   43:  '+')          	// '+' (plus)
@148 002d	///    CH_MN: 0148 [002d]: (   45:  '-')          	// '-' (minus)
@149 014b	///    A_ZMG: 0149 [014b]: (  331:  331)          
@14a fffc	///  CNT_ZMG: 014a [fffc]: (   -4:65532)          	// CNT_ZMG = -4
@14b 0000	///      ZMG: 014b [0000]: (    0:    0)          	// hex digit 3
@14c 0000	///           014c [0000]: (    0:    0)          	// hex digit 2
@14d 0000	///           014d [0000]: (    0:    0)          	// hex digit 1
@14e 0000	///           014e [0000]: (    0:    0)          	// hex digit 0
@14f 0151	///    A_EMG: 014f [0151]: (  337:  337)          
@150 fffa	///  CNT_EMG: 0150 [fffa]: (   -6:65530)          	// CNT_EMG = -6
@151 0065	///      EMG: 0151 [0065]: (  101:  'e')          	// 'e'
@152 0072	///           0152 [0072]: (  114:  'r')          	// 'r'
@153 0072	///           0153 [0072]: (  114:  'r')          	// 'r'
@154 006f	///           0154 [006f]: (  111:  'o')          	// 'o'
@155 0072	///           0155 [0072]: (  114:  'r')          	// 'r'
@156 0021	///           0156 [0021]: (   33:  '!')          	// '!'
@157 0159	///    A_BMG: 0157 [0159]: (  345:  345)          
@158 fffc	///  CNT_BMG: 0158 [fffc]: (   -4:65532)          	// CNT_BMG = -4
@159 0062	///      BMG: 0159 [0062]: (   98:  'b')          	// 'b'
@15a 0079	///           015a [0079]: (  121:  'y')          	// 'y'
@15b 0065	///           015b [0065]: (  101:  'e')          	// 'e'
@15c 0021	///           015c [0021]: (   33:  '!')          	// '!'
