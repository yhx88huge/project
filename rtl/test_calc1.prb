/// Verilog Memory Probe File (.prb) generated by ./ex3_asm

/// bit[31:28] : memory type (0000 : data, 1111 : end-of-memory
/// bit[27:16] : address
/// bit[15:0]  : data

// interrupt entry point
0000001e	///	      ST0: 0000 [001e]: (   30:   30)          	// interrupt return address
001f0119	///	   INI_ST: 001f [0119]: (  281:  281)          
0055006b	///	   CHK_CH: 0055 [006b]: (  107:  'k')          	// return address
00ad0071	///	  SET_MSG: 00ad [0071]: (  113:  'q')          
00b40034	///	  READ_HX: 00b4 [0034]: (   52:  '4')          	// return addess
00b70000	///	           00b7 [0000]: (    0:    0)          	// 2nd argument to CHK_DGT (offset)
00b80009	///	           00b8 [0009]: (    9:    9)          	// 3rd argument to CHK_DGT (upper bound)
00bd000a	///	           00bd [000a]: (   10:   10)          	// 2nd argument to CHK_DGT (offset)
00be0005	///	           00be [0005]: (    5:    5)          	// 3rd argument to CHK_DGT (upper bound)
00c3000a	///	           00c3 [000a]: (   10:   10)          	// 2nd argument to CHK_DGT (offset)
00c40005	///	           00c4 [0005]: (    5:    5)          	// 3rd argument to CHK_DGT (upper bound)
00d400c5	///	  CHK_DGT: 00d4 [00c5]: (  197:  197)          	// return address
00e600a8	///	  WRITE_Z: 00e6 [00a8]: (  168:  168)          	// return address
// data (no initialization)
01230804	///	        Z: 0123 [0804]: ( 2052: 2052)          	// result
01240158	///	      TMA: 0124 [0158]: (  344:  344)          	// temporal
01250000	///	      TMB: 0125 [0000]: (    0:    0)          	// temporal
01260071	///	      TMI: 0126 [0071]: (  113:  'q')          	// char (raw) input
0127003a	///	      HXI: 0127 [003a]: (   58:  ':')          	// hex input
01280000	///	       BA: 0128 [0000]: (    0:    0)          	// backup storage for AC during interrupt handling
01290000	///	       BE: 0129 [0000]: (    0:    0)          	// backup storage for  E during interrupt handling
012a015d	///	   PTR_MG: 012a [015d]: (  349:  349)          	// message pointer
// data (need initialization code : one-time)
012b0001	///	      BYE: 012b [0001]: (    1:    1)          	// (init: 0) bye
012c0001	///	  NXT_BYE: 012c [0001]: (    1:    1)          	// (init: 0) next bye
012d003d	///	      OPR: 012d [003d]: (   61:  '=')          	// (init: 0) operator
012e048a	///	        X: 012e [048a]: ( 1162: 1162)          	// (init: 0) X operand
// data (need initialization code : after every output -> INI_ST)
012f0000	///	        Y: 012f [0000]: (    0:    0)          	// (init: 0) Y operand
01300000	///	     Y_PD: 0130 [0000]: (    0:    0)          	// (init: 0) Y pending
0131fffc	///	      CNT: 0131 [fffc]: (   -4:65532)          	// (init: -4) digit count
01320000	///	      STT: 0132 [0000]: (    0:    0)          	// (init: 0) 0: read operand, 1: read operator
01330000	///	  OUT_STT: 0133 [0000]: (    0:    0)          	// (init: 0) 0: output 1st newline, 1: output ans, 2: output 2nd newline
// data (read-only)
0134fff0	///	      AMK: 0134 [fff0]: (  -16:65520)          	// AMK = FFF0 (and mask)
0135000f	///	     AMKN: 0135 [000f]: (   15:   15)          	// AMKN = 000F (and mask negated)
01360001	///	      VH1: 0136 [0001]: (    1:    1)          	// VH1 = 1
01370002	///	      VH2: 0137 [0002]: (    2:    2)          	// VH2 = 2
01380003	///	      VH3: 0138 [0003]: (    3:    3)          	// VH3 = 3
01390004	///	      VH4: 0139 [0004]: (    4:    4)          	// VH4 = 4
013a0008	///	      VH8: 013a [0008]: (    8:    8)          	// VH8 = 8
013b000a	///	      VHA: 013b [000a]: (   10:   10)          	// VHA = A
013cffff	///	      VM1: 013c [ffff]: (   -1:65535)          	// VM1 = -1
013dfffe	///	      VM2: 013d [fffe]: (   -2:65534)          	// VM2 = -2
013efffc	///	      VM4: 013e [fffc]: (   -4:65532)          	// VM2 = -4
013ffff6	///	     VM10: 013f [fff6]: (  -10:65526)          	// VM10 = -10
01400030	///	     CH_0: 0140 [0030]: (   48:  '0')          	// '0'
01410041	///	    CH_UA: 0141 [0041]: (   65:  'A')          	// 'A'
01420061	///	    CH_LA: 0142 [0061]: (   97:  'a')          	// 'a'
0143000a	///	    CH_NL: 0143 [000a]: (   10:   10)          	// '\n' (newline : line feed)
0144000d	///	    CH_CR: 0144 [000d]: (   13:   13)          	// '\r' (carrage return : appears on DOS)
01450020	///	    CH_WS: 0145 [0020]: (   32:  ' ')          	// ' ' (white space)
0146003d	///	    CH_EQ: 0146 [003d]: (   61:  '=')          	// '=' (equal)
0147002b	///	    CH_PL: 0147 [002b]: (   43:  '+')          	// '+' (plus)
0148002d	///	    CH_MN: 0148 [002d]: (   45:  '-')          	// '-' (minus)
0149014b	///	    A_ZMG: 0149 [014b]: (  331:  331)          
014afffc	///	  CNT_ZMG: 014a [fffc]: (   -4:65532)          	// CNT_ZMG = -4
014b0030	///	      ZMG: 014b [0030]: (   48:  '0')          	// hex digit 3
014c0034	///	           014c [0034]: (   52:  '4')          	// hex digit 2
014d0038	///	           014d [0038]: (   56:  '8')          	// hex digit 1
014e0041	///	           014e [0041]: (   65:  'A')          	// hex digit 0
014f0151	///	    A_EMG: 014f [0151]: (  337:  337)          
0150fffa	///	  CNT_EMG: 0150 [fffa]: (   -6:65530)          	// CNT_EMG = -6
01510065	///	      EMG: 0151 [0065]: (  101:  'e')          	// 'e'
01520072	///	           0152 [0072]: (  114:  'r')          	// 'r'
01530072	///	           0153 [0072]: (  114:  'r')          	// 'r'
0154006f	///	           0154 [006f]: (  111:  'o')          	// 'o'
01550072	///	           0155 [0072]: (  114:  'r')          	// 'r'
01560021	///	           0156 [0021]: (   33:  '!')          	// '!'
01570159	///	    A_BMG: 0157 [0159]: (  345:  345)          
0158fffc	///	  CNT_BMG: 0158 [fffc]: (   -4:65532)          	// CNT_BMG = -4
01590062	///	      BMG: 0159 [0062]: (   98:  'b')          	// 'b'
015a0079	///	           015a [0079]: (  121:  'y')          	// 'y'
015b0065	///	           015b [0065]: (  101:  'e')          	// 'e'
015c0021	///	           015c [0021]: (   33:  '!')          	// '!'
f0000000	///	end-of-memory
