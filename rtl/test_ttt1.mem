/// Verilog Memory Initialization File (.mem) generated by ./ex3_asm

/// 12-bit address
/// 16-bit data

// interrupt entry point
@000 0000	///        ST0: 0000 [0000]: (    0:    0)            	// interrupt return address
@001 4024	///             0001 [4024]: BUN 024   (      I_HND)	// goto I_HND (interrupt handler)
// program entry point
// initialize data
@010 7800	///        INI: 0010 [7800]: CLA                    	// AC         <- 0
@011 31ed	///             0011 [31ed]: STA 1ed   (        BYE)	// M[BYE]     <- 0
@012 31ee	///             0012 [31ee]: STA 1ee   (    NXT_BYE)	// M[NXT_BYE] <- 0
@013 31ef	///             0013 [31ef]: STA 1ef   (        STT)	// M[STT]     <- 0
@014 31f0	///             0014 [31f0]: STA 1f0   (    NXT_STT)	// M[NXT_STT] <- 0
@015 220f	///             0015 [220f]: LDA 20f   (        VH1)	// AC         <- 1
@016 31f2	///             0016 [31f2]: STA 1f2   (    NXT_INP)	// M[NXT_INP] <- 1 (change to input state after output process)
@017 31f1	///             0017 [31f1]: STA 1f1   (    OUT_STT)	// M[OUT_STT] <- 1 (output state)
// set start message
@018 2210	///             0018 [2210]: LDA 210   (        VH2)	// AC <- 2
@019 5199	///             0019 [5199]: BSA 199   (     SET_ML)	// call SET_ML (set message list)
@01a 0223	///             001a [0223]: (  547:  547)            
@01b 029a	///             001b [029a]: (  666:  666)            
// setup IO registers
@01c 2212	///             001c [2212]: LDA 212   (        VH4)	// AC <- 4
@01d f008	///             001d [f008]: IMK                    	// IMSK <- 0100 (S_OUT enabled)
@01e f020	///             001e [f020]: SIO                    	// IOT <- 1 (serial-IO selected)
@01f f080	///             001f [f080]: ION                    	// enable interrupt
// wait until (M[BYE] = 1)
@020 21ed	///         L0: 0020 [21ed]: LDA 1ed   (        BYE)	// AC <- M[BYE]
@021 7004	///             0021 [7004]: SZA                    	// (M[BYE] == 0) ? skip next
@022 7001	///             0022 [7001]: HLT                    
@023 4020	///             0023 [4020]: BUN 020   (         L0)	// goto L0
//////////// interrupt handler ///////////
// store AC & E to memory
@024 31dc	///      I_HND: 0024 [31dc]: STA 1dc   (         BA)	// M[BA] <- AC	(store AC)
@025 7040	///             0025 [7040]: CIL                    	// AC[0] <- E	(AC[15:1] is not important here...)
@026 31dd	///             0026 [31dd]: STA 1dd   (         BE)	// M[BE] <- AC	(store E)
//////////// state machine ///////////
// M[OUT_PD] = 0 (process input), 1 (process output)
// check state :
@027 21f1	///             0027 [21f1]: LDA 1f1   (    OUT_STT)	// AC <- M[OUT_STT]
@028 7004	///             0028 [7004]: SZA                    	// (M[OUT_STT] == 0) skip next
@029 41bc	///             0029 [41bc]: BUN 1bc   (    PUT_OUT)	// goto PUT_OUT (process output)
//////////// process input ///////////
// M[OUT_STT] = 0 : input mode (M[TMI] <- INPR)
@02a f200	///             002a [f200]: SKI                    	// (FGI = 0) ? skip next
@02b 4042	///             002b [4042]: BUN 042   (        IRT)	// goto IRT (return from interrupt handler) --> this should not happen...
@02c 7800	///             002c [7800]: CLA                    	// AC      <- 0
@02d f800	///             002d [f800]: INP                    	// AC[7:0] <- INPR
@02e 31db	///             002e [31db]: STA 1db   (        TMI)	// M[TMI]  <- INPR
//////////// state switch : M[STT] = 0, 1, 2, 3, 4, 5, 6 ///////////
@02f 21ef	///     STT_SW: 002f [21ef]: LDA 1ef   (        STT)	// AC <- M[STT]
@030 1215	///             0030 [1215]: ADD 215   (        VM1)	// AC <- M[STT] - 1
@031 7010	///             0031 [7010]: SPA                    	// (M[STT] >= 1) ? skip next
@032 4055	///             0032 [4055]: BUN 055   (      STT_0)	// goto STT_0 (M[STT] = 0: setup new game) --> M[NXT_STT] = 1 (get your move), 2 (put my move)
@033 1215	///             0033 [1215]: ADD 215   (        VM1)	// AC <- M[STT] - 1 - 1
@034 7010	///             0034 [7010]: SPA                    	// (M[STT] >= 2) ? skip next
@035 406e	///             0035 [406e]: BUN 06e   (      STT_1)	// goto STT_1 (M[STT] = 1: get your move)  --> M[NXT_STT] = 2 (put my move), 4 (end game)
@036 1215	///             0036 [1215]: ADD 215   (        VM1)	// AC <- M[STT] - 2 - 1
@037 7010	///             0037 [7010]: SPA                    	// (M[STT] >= 3) ? skip next
@038 4088	///             0038 [4088]: BUN 088   (      STT_2)	// goto STT_2 (M[STT] = 2: put my move)    --> M[NXT_STT] = 3 (show my move)
@039 1215	///             0039 [1215]: ADD 215   (        VM1)	// AC <- M[STT] - 3 - 1
@03a 7010	///             003a [7010]: SPA                    	// (M[STT] >= 4) ? skip next
@03b 4096	///             003b [4096]: BUN 096   (      STT_3)	// goto STT_3 (M[STT] = 3: show my move)   --> M[NXT_STT] = 1 (get your move), 4 (end game)
@03c 4098	///             003c [4098]: BUN 098   (      STT_4)	// goto STT_4 (M[STT] = 4: end game)       --> M[NXT_STT] = 0 (setup new game)
//////////// end tic-tac-toe ///////////
@03d 220f	///    END_TTT: 003d [220f]: LDA 20f   (        VH1)	// AC         <- 1
@03e 5199	///             003e [5199]: BSA 199   (     SET_ML)	// call SET_ML (set message list)
@03f 0240	///             003f [0240]: (  576:  576)            
@040 31ee	///             0040 [31ee]: STA 1ee   (    NXT_BYE)	// M[NXT_BYE] <- 1
@041 4047	///             0041 [4047]: BUN 047   (    PRP_OUT)	// goto PRP_OUT (prepare output)
//////////// return from interrupt handler ///////////
@042 21dd	///        IRT: 0042 [21dd]: LDA 1dd   (         BE)	// AC  <- M[BE]
@043 7080	///             0043 [7080]: CIR                    	// E   <- AC[0]	(restore E)
@044 21dc	///             0044 [21dc]: LDA 1dc   (         BA)	// AC  <- M[BA]	(restore AC)
@045 f080	///             0045 [f080]: ION                    	// IEN <- 1		(enable interrupt)
@046 c000	///             0046 [c000]: BUN 000 I (        ST0)	// return from ST0 (interrupt handler)
//////////// prepare output ///////////
@047 220f	///    PRP_OUT: 0047 [220f]: LDA 20f   (        VH1)	// AC         <- 1
@048 31f1	///             0048 [31f1]: STA 1f1   (    OUT_STT)	// M[OUT_STT] <- 1 (output state)
//		LDA VH4			/ AC         <- 4
//		IMK				/ IMASK      <- 0100 (S_OUT enabled)
@049 4042	///             0049 [4042]: BUN 042   (        IRT)	// goto IRT (return from interrupt handler)
@04a 0000	///   PRP_TURN: 004a [0000]: (    0:    0)            	// return address
//////////// subroutine (prepare next turn)  ///////////
@04b 2201	///             004b [2201]: LDA 201   (       TURN)	// AC         <- M[TURN]
@04c 7004	///             004c [7004]: SZA                    	// (AC = 0) ? skip next
@04d 4052	///             004d [4052]: BUN 052   (     PRP_MT)	// goto PRP_MT (prepare my turn)
// prepare "your turn"
@04e 220f	///             004e [220f]: LDA 20f   (        VH1)	// AC         <- 1
@04f 31f0	///             004f [31f0]: STA 1f0   (    NXT_STT)	// M[NXT_STT] <- 1 (next state : get your move)
@050 31f2	///             0050 [31f2]: STA 1f2   (    NXT_INP)	// M[INP]     <- 1 (change to input state after output process)
@051 c04a	///             0051 [c04a]: BUN 04a I (   PRP_TURN)	// return from PRP_TURN
// prepare "my turn"
@052 2210	///     PRP_MT: 0052 [2210]: LDA 210   (        VH2)	// AC         <- 2
@053 31f0	///             0053 [31f0]: STA 1f0   (    NXT_STT)	// M[NXT_STT] <- 2 (next state : put my move)
@054 c04a	///             0054 [c04a]: BUN 04a I (   PRP_TURN)	// return from PRP_TURN
//////////// M[STT] = 0 : setup new game  ///////////
// determine who gets the opening move 
@055 221c	///      STT_0: 0055 [221c]: LDA 21c   (       CH_0)	// AC <- '0'
@056 7200	///             0056 [7200]: CMA                    
@057 7020	///             0057 [7020]: INC                    	// AC <- -'0'
@058 11db	///             0058 [11db]: ADD 1db   (        TMI)	// AC <- M[TMI] - '0'
@059 3201	///             0059 [3201]: STA 201   (       TURN)	// M[TURM] <- M[TMI] - '0'
@05a 7010	///             005a [7010]: SPA                    	// (M[TMI] >= '0') ? skip next
@05b 403d	///             005b [403d]: BUN 03d   (    END_TTT)	// goto END_TTT (end tic-tac-toe : M[TMI] < '0')
@05c 1216	///             005c [1216]: ADD 216   (        VM2)	// AC <- M[TURM] - 2
@05d 7008	///             005d [7008]: SNA                    	// (M[TURM] < 2) ? skip next
@05e 403d	///             005e [403d]: BUN 03d   (    END_TTT)	// goto END_TTT (end tic-tac-toe : M[TMI] >= '2')
// clear board
@05f 221a	///             005f [221a]: LDA 21a   (        VM9)	// AC       <- -9
@060 31df	///             0060 [31df]: STA 1df   (      CNT_1)	// M[CNT1]  <- -9
@061 2203	///             0061 [2203]: LDA 203   (      A_BRD)	// AC       <- M[A_BRD] (BRD)
@062 31e2	///             0062 [31e2]: STA 1e2   (      P_BRD)	// M[P_BRD] <- BRD
@063 7800	///             0063 [7800]: CLA                    	// AC       <- 0
// loop clear board
@064 b1e2	///  L_CLR_BRD: 0064 [b1e2]: STA 1e2 I (      P_BRD)	// M[M[P_BRD]] <- 0
@065 61e2	///             0065 [61e2]: ISZ 1e2   (      P_BRD)	// ++M[P_BRD]
@066 61df	///             0066 [61df]: ISZ 1df   (      CNT_1)	// ((++M[CNT_1]) == 0) ? skip next
@067 4064	///             0067 [4064]: BUN 064   (  L_CLR_BRD)	// goto L_CLR_BRD (loop clear board)
// initialize move_count, winner
@068 3202	///             0068 [3202]: STA 202   (     WINNER)	// M[WINNER]  <- 0
@069 221a	///             0069 [221a]: LDA 21a   (        VM9)	// AC         <- -9
@06a 3200	///             006a [3200]: STA 200   (    CNT_MOV)	// M[CNT_MOV] <- -9
@06b 504a	///             006b [504a]: BSA 04a   (   PRP_TURN)	// call PRP_TURN (prepare next turn)
@06c 50b1	///             006c [50b1]: BSA 0b1   (  SHOW_GAME)	// call SHOW_GAME
@06d 4047	///             006d [4047]: BUN 047   (    PRP_OUT)	// goto PRP_OUT (prepare output)
//////////// M[STT] = 1 : get your move (must satisfy: '1' <= M[TMI] <= '9')  ///////////
@06e 221d	///      STT_1: 006e [221d]: LDA 21d   (       CH_1)	// AC        <- M[CH_1] ('1')
@06f 7200	///             006f [7200]: CMA                    
@070 7020	///             0070 [7020]: INC                    	// AC        <- -'1'
@071 11db	///             0071 [11db]: ADD 1db   (        TMI)	// AC        <- M[TMI] - '1'
@072 7010	///             0072 [7010]: SPA                    	// (M[TMI] >= '1') ? skip next
@073 4082	///             0073 [4082]: BUN 082   (      NG_YM)	// goto NG_YM (your move is invalid : invalid position)
@074 31db	///             0074 [31db]: STA 1db   (        TMI)	// M[TMI]    <- M[TMI] - '1';
@075 121a	///             0075 [121a]: ADD 21a   (        VM9)	// AC        <- M[TMI] - 9
@076 7008	///             0076 [7008]: SNA                    	// (M[TMI] < 9) ? skip next
@077 4082	///             0077 [4082]: BUN 082   (      NG_YM)	// goto NG_YM (your move is invalid : invalid position)
// put your move to board
@078 2203	///             0078 [2203]: LDA 203   (      A_BRD)	// AC        <- M[A_BRD] (BRD)
@079 11db	///             0079 [11db]: ADD 1db   (        TMI)	// AC        <- BRD + M[TMI]
@07a 31e2	///             007a [31e2]: STA 1e2   (      P_BRD)	// M[P_BRD]  <- BRD + M[TMI]
@07b a1e2	///             007b [a1e2]: LDA 1e2 I (      P_BRD)	// AC        <- M[BRD + M[TMI]]
@07c 7004	///             007c [7004]: SZA                    	// (M[BRD + M[TMI]] == 0) ? skip next
@07d 4082	///             007d [4082]: BUN 082   (      NG_YM)	// goto NG_YM (your move is invalid : already occupied...)
@07e 2220	///             007e [2220]: LDA 220   (      YR_MK)	// AC              <- M[YR_MK] ('O')
@07f b1e2	///             007f [b1e2]: STA 1e2 I (      P_BRD)	// M[BRD + M[TMI]] <- M[YR_MK] ('O')
@080 50e3	///             0080 [50e3]: BSA 0e3   (   UPD_TURN)	// call UPD_TURN (update turn)
@081 4047	///             0081 [4047]: BUN 047   (    PRP_OUT)	// goto PRP_OUT (prepare output)
// your move is invalid
@082 220f	///      NG_YM: 0082 [220f]: LDA 20f   (        VH1)	// AC     <- 1
@083 5199	///             0083 [5199]: BSA 199   (     SET_ML)	// call SET_ML (set message list)
@084 028c	///             0084 [028c]: (  652:  652)            
@085 220f	///             0085 [220f]: LDA 20f   (        VH1)	// AC     <- 1
@086 31f2	///             0086 [31f2]: STA 1f2   (    NXT_INP)	// M[INP] <- 1
@087 4047	///             0087 [4047]: BUN 047   (    PRP_OUT)	// goto PRP_OUT (prepare output)
//////////// M[STT] = 2 : put my move  ///////////
@088 512b	///      STT_2: 0088 [512b]: BSA 12b   (     MY_MOV)	// call MY_MOV (next move position stored in M[P_BRD])
// put my move to board
@089 221f	///             0089 [221f]: LDA 21f   (      MY_MK)	// AC           <- M[MY_MK] ('X')
@08a b1e2	///             008a [b1e2]: STA 1e2 I (      P_BRD)	// M[BRD + pos] <- M[MY_MK] ('X')
// put my move to output
@08b 2203	///             008b [2203]: LDA 203   (      A_BRD)	// AC           <- M[A_BRD] (BRD)
@08c 7200	///             008c [7200]: CMA                    
@08d 7020	///             008d [7020]: INC                    	// AC           <- - BRD
@08e 11e2	///             008e [11e2]: ADD 1e2   (      P_BRD)	// AC           <- P_BRD - BRD (= pos)
@08f 121d	///             008f [121d]: ADD 21d   (       CH_1)	// AC           <- pos + '1'
@090 323c	///             0090 [323c]: STA 23c   (  MG_MY_MV0)	// M[MG_MY_MV0]  <- pos + '1'
// set output message
@091 518b	///             0091 [518b]: BSA 18b   (    SET_MGP)	// call SET_MGP (set message to P_OUT)
@092 023b	///             0092 [023b]: (  571:  571)            
@093 2211	///             0093 [2211]: LDA 211   (        VH3)	// AC           <- 3
@094 31f0	///             0094 [31f0]: STA 1f0   (    NXT_STT)	// M[NXT_STT]   <- 3
@095 4047	///             0095 [4047]: BUN 047   (    PRP_OUT)	// goto PRP_OUT (prepare output)
//////////// M[STT] = 3 : show my move  ///////////
@096 50e3	///      STT_3: 0096 [50e3]: BSA 0e3   (   UPD_TURN)	// call UPD_TURN (update turn)
@097 4047	///             0097 [4047]: BUN 047   (    PRP_OUT)	// goto PRP_OUT (prepare output)
//////////// M[STT] = 4 : end game  ///////////
@098 2202	///      STT_4: 0098 [2202]: LDA 202   (     WINNER)	// AC         <- M[WINNER]
@099 7004	///             0099 [7004]: SZA                    	// (M[WINNER] == 0) ? skip next
@09a 409e	///             009a [409e]: BUN 09e   (    WHO_WON)	// BUN WHO_WON (who won??)
@09b 227d	///             009b [227d]: LDA 27d   (   A_MG_TIE)	// AC         <- M[A_MG_TIE] (MG_TIE : "it's a tie")
@09c 30aa	///             009c [30aa]: STA 0aa   (     RESULT)	// M[RESULT]  <- "it's a tie"
@09d 40a8	///             009d [40a8]: BUN 0a8   (    STT_4_1)	// goto STT_4_1
@09e 7200	///    WHO_WON: 009e [7200]: CMA                    
@09f 7020	///             009f [7020]: INC                    	// AC         <- - M[WINNER]
@0a0 1220	///             00a0 [1220]: ADD 220   (      YR_MK)	// AC         <- M[YR_MK] - M[WINNER]
@0a1 7004	///             00a1 [7004]: SZA                    	// (M[YR_MK] == M[WINNER]) ? skip next
@0a2 40a6	///             00a2 [40a6]: BUN 0a6   (      I_WON)	// goto I_WON
@0a3 226b	///             00a3 [226b]: LDA 26b   (   A_MG_YWN)	// AC         <- M[A_MG_YWN] (MG_YWN : "you win!")
@0a4 30aa	///             00a4 [30aa]: STA 0aa   (     RESULT)	// M[RESULT]  <- "you win!"
@0a5 40a8	///             00a5 [40a8]: BUN 0a8   (    STT_4_1)	// goto STT_4_1
@0a6 2275	///      I_WON: 00a6 [2275]: LDA 275   (   A_MG_IWN)	// AC         <- M[A_MG_IWN] (MG_IWN : "I win!")
@0a7 30aa	///             00a7 [30aa]: STA 0aa   (     RESULT)	// M[RESULT]  <- "I win!"
@0a8 2210	///    STT_4_1: 00a8 [2210]: LDA 210   (        VH2)	// AC         <- 2
@0a9 5199	///             00a9 [5199]: BSA 199   (     SET_ML)	// call SET_ML (set message list)
@0aa 0000	///     RESULT: 00aa [0000]: (    0:    0)            	// (arg1) "you win!" or "I win!" or "it's a tie..."
@0ab 029a	///             00ab [029a]: (  666:  666)            
@0ac 220f	///             00ac [220f]: LDA 20f   (        VH1)	// AC         <- 1
@0ad 31f2	///             00ad [31f2]: STA 1f2   (    NXT_INP)	// M[INP]     <- 1
@0ae 7800	///             00ae [7800]: CLA                    	// AC         <- 0
@0af 31f0	///             00af [31f0]: STA 1f0   (    NXT_STT)	// M[NXT_STT] <- 0
@0b0 4047	///             00b0 [4047]: BUN 047   (    PRP_OUT)	// goto PRP_OUT (prepare output)
@0b1 0000	///  SHOW_GAME: 00b1 [0000]: (    0:    0)            	// return address
//////////// subroutine (show game)  ///////////
@0b2 2203	///             00b2 [2203]: LDA 203   (      A_BRD)	// AC        <- M[A_BRD] (BRD)
@0b3 31e2	///             00b3 [31e2]: STA 1e2   (      P_BRD)	// M[P_BRD]  <- BRD + 1
@0b4 22c2	///             00b4 [22c2]: LDA 2c2   (   A_MG_BRD)	// AC        <- M[A_MG_BRD] (MG_BRD)
@0b5 7020	///             00b5 [7020]: INC                    	// AC        <- MG_BRD + 1
@0b6 31de	///             00b6 [31de]: STA 1de   (     PTR_MG)	// M[PTR_MG] <- MG_BRD + 1
@0b7 2217	///             00b7 [2217]: LDA 217   (        VM3)	// AC        <- -3
@0b8 31df	///             00b8 [31df]: STA 1df   (      CNT_1)	// M[CNT_1]  <- -3
@0b9 221d	///             00b9 [221d]: LDA 21d   (       CH_1)	// AC        <- '1'
@0ba 31d9	///             00ba [31d9]: STA 1d9   (        TMA)	// M[TMA]    <- '1'
// loop print board
@0bb 50d9	///   L_PUT_BD: 00bb [50d9]: BSA 0d9   (    PRT_BRD)	// call PRT_BRD (print board)
@0bc 50d9	///             00bc [50d9]: BSA 0d9   (    PRT_BRD)	// call PRT_BRD (print board)
@0bd 50d9	///             00bd [50d9]: BSA 0d9   (    PRT_BRD)	// call PRT_BRD (print board)
@0be 61de	///             00be [61de]: ISZ 1de   (     PTR_MG)	// ++M[PTR_MG] : skip newline position on BD_MG
@0bf 61df	///             00bf [61df]: ISZ 1df   (      CNT_1)	// ((++M[CNT_1]) == 0) ? skip next
@0c0 40bb	///             00c0 [40bb]: BUN 0bb   (   L_PUT_BD)	// goto L_PUT_BD (loop print board)
// check winner
@0c1 2202	///             00c1 [2202]: LDA 202   (     WINNER)	// AC <- M[WINNER]
@0c2 7004	///             00c2 [7004]: SZA                    	// (M[WINNER] == 0) ? skip next
@0c3 40d0	///             00c3 [40d0]: BUN 0d0   ( SET_GM_OVR)	// goto SET_GM_OVR (M[WINNER] != 0)
@0c4 2200	///             00c4 [2200]: LDA 200   (    CNT_MOV)	// AC <- M[CNT_MOV]
@0c5 7008	///             00c5 [7008]: SNA                    	// (M[CNT_MOV] < 0) ? skip next
@0c6 40d0	///             00c6 [40d0]: BUN 0d0   ( SET_GM_OVR)	// goto SET_GM_OVR (M[CNT_MOV] == 0)
// set NXT_MV ("your move!" or "my move!")
@0c7 2201	///             00c7 [2201]: LDA 201   (       TURN)	// AC <- M[TURN]
@0c8 7004	///             00c8 [7004]: SZA                    	// (M[TURN] == 0) ? skip next
@0c9 40cd	///             00c9 [40cd]: BUN 0cd   (    SET_MMV)	// goto SET_MMV
// set "your move!"
@0ca 2249	///             00ca [2249]: LDA 249   (   A_MG_YMV)	// AC <- M[A_MG_YMV] (MG_YMV: "your move!")
@0cb 30d7	///             00cb [30d7]: STA 0d7   (     NXT_MV)	// M[NXT_MV] <- "your move!"
@0cc 40d2	///             00cc [40d2]: BUN 0d2   ( SET_MG_BRD)	// goto SET_MG_BRD
// set "my move!"
@0cd 2255	///    SET_MMV: 00cd [2255]: LDA 255   (   A_MG_MMV)	// AC <- M[A_MG_MMV] (MG_MMV: "my move!")
@0ce 30d7	///             00ce [30d7]: STA 0d7   (     NXT_MV)	// M[NXT_MV] <- "your move!"
@0cf 40d2	///             00cf [40d2]: BUN 0d2   ( SET_MG_BRD)	// goto SET_MG_BRD
// set "game over!"
@0d0 225f	/// SET_GM_OVR: 00d0 [225f]: LDA 25f   (   A_MG_GMO)	// AC <- M[A_MG_GMO] (MG_GMO: "game over!")
@0d1 30d7	///             00d1 [30d7]: STA 0d7   (     NXT_MV)	// M[NXT_MV] <- "game over!"
// set MG_BRD
@0d2 2212	/// SET_MG_BRD: 00d2 [2212]: LDA 212   (        VH4)	// AC <- 4
@0d3 5199	///             00d3 [5199]: BSA 199   (     SET_ML)	// call SET_ML (set message list)
@0d4 02bd	///             00d4 [02bd]: (  701:  701)            
@0d5 02c3	///             00d5 [02c3]: (  707:  707)            
@0d6 02bd	///             00d6 [02bd]: (  701:  701)            
@0d7 0000	///     NXT_MV: 00d7 [0000]: (    0:    0)            	// (arg4) "your move!" or "my move!" or "game over!"
@0d8 c0b1	///             00d8 [c0b1]: BUN 0b1 I (  SHOW_GAME)	// return from SHOW_GAME
@0d9 0000	///    PRT_BRD: 00d9 [0000]: (    0:    0)            	// return address
//////////// subroutine (print board)  ///////////
@0da a1e2	///             00da [a1e2]: LDA 1e2 I (      P_BRD)	// AC           <- M[M[P_BRD]]
@0db 7004	///             00db [7004]: SZA                    	// (AC == 0) ? skip next
@0dc 40de	///             00dc [40de]: BUN 0de   (     CPY_BD)	// goto CPY_BD
@0dd 21d9	///             00dd [21d9]: LDA 1d9   (        TMA)	// AC           <- M[TMA]
@0de b1de	///     CPY_BD: 00de [b1de]: STA 1de I (     PTR_MG)	// M[M[PTR_MG]] <- AC
@0df 61de	///             00df [61de]: ISZ 1de   (     PTR_MG)	// ++M[PTR_MG]
@0e0 61e2	///             00e0 [61e2]: ISZ 1e2   (      P_BRD)	// ++M[P_BRD]
@0e1 61d9	///             00e1 [61d9]: ISZ 1d9   (        TMA)	// ++M[TMA]
@0e2 c0d9	///             00e2 [c0d9]: BUN 0d9 I (    PRT_BRD)	// return from PRT_BRD
@0e3 0000	///   UPD_TURN: 00e3 [0000]: (    0:    0)            
//////////// subroutine (update turn)  ///////////
@0e4 2201	///             00e4 [2201]: LDA 201   (       TURN)	// AC         <- M[TURN]
@0e5 7200	///             00e5 [7200]: CMA                    	// AC         <- - M[TURN] - 1
@0e6 7020	///             00e6 [7020]: INC                    	// AC         <- - M[TURN]
@0e7 7020	///             00e7 [7020]: INC                    	// AC         <- 1 - M[TURN]
@0e8 3201	///             00e8 [3201]: STA 201   (       TURN)	// M[TURN]    <- 1 - M[TURN]
@0e9 5112	///             00e9 [5112]: BSA 112   (    CHK_WIN)	// call CHK_WIN
@0ea 7004	///             00ea [7004]: SZA                    	// (AC == 0) ? skip next (AC = winner mark)
@0eb 40ee	///             00eb [40ee]: BUN 0ee   (   END_TURN)	// goto END_TURN (winner mark != 0)
@0ec 6200	///             00ec [6200]: ISZ 200   (    CNT_MOV)	// ((++M[CNT_MOV]) == 0) ? skip next
@0ed 40f2	///             00ed [40f2]: BUN 0f2   (   NXT_TURN)	// goto NXT_TURN
@0ee 2212	///   END_TURN: 00ee [2212]: LDA 212   (        VH4)	// AC         <- 4
@0ef 31f0	///             00ef [31f0]: STA 1f0   (    NXT_STT)	// M[NXT_STT] <- 4 (next state : end game)
@0f0 50b1	///             00f0 [50b1]: BSA 0b1   (  SHOW_GAME)	// call SHOW_GAME
@0f1 c0e3	///             00f1 [c0e3]: BUN 0e3 I (   UPD_TURN)	// return from UPD_TURN
@0f2 504a	///   NXT_TURN: 00f2 [504a]: BSA 04a   (   PRP_TURN)	// call PRP_TURN (prepare next turn)
@0f3 50b1	///             00f3 [50b1]: BSA 0b1   (  SHOW_GAME)	// call SHOW_GAME
@0f4 c0e3	///             00f4 [c0e3]: BUN 0e3 I (   UPD_TURN)	// return from UPD_TURN
@0f5 0000	///   CHK_CH_N: 00f5 [0000]: (    0:    0)            
/////////// subroutine (check character) ///////////
// arg0 (AC) : ch (character to identify)
// return AC : (M[TMI] != ch)
@0f6 7200	///             00f6 [7200]: CMA                    
@0f7 7020	///             00f7 [7020]: INC                    	// AC <- - ch
@0f8 11db	///             00f8 [11db]: ADD 1db   (        TMI)	// AC <- M[TMI] - ch
@0f9 c0f5	///             00f9 [c0f5]: BUN 0f5 I (   CHK_CH_N)	// return from CHK_CH
@0fa 0000	///      CHK_3: 00fa [0000]: (    0:    0)            
//////////// subroutine (check 3-in-a-row)  ///////////
// arg0 (AC)  : pos
// M[BRD_OFS] : offset
// 3 positions : BRD[pos], BRD[pos + offset], BRD[pos + offset * 2]
// return AC (winner) : 'O' or 'X' or 0 (no winner)
@0fb 1203	///             00fb [1203]: ADD 203   (      A_BRD)	// AC        <- pos + M[A_BRD] (BRD + pos)
@0fc 31e2	///             00fc [31e2]: STA 1e2   (      P_BRD)	// M[P_BRD]  <- BRD + pos
@0fd a1e2	///             00fd [a1e2]: LDA 1e2 I (      P_BRD)	// AC        <- M[BRD + pos]
@0fe 7004	///             00fe [7004]: SZA                    	// (M[BRD + pos] == 0) ? skip next
@0ff 4101	///             00ff [4101]: BUN 101   (    CHK_3_1)	// goto CHK_3_1
@100 4110	///             0100 [4110]: BUN 110   (  R_CHK_3_0)	// goto R_CHK_3_0 (return 0 : no winner)
@101 31db	///    CHK_3_1: 0101 [31db]: STA 1db   (        TMI)	// M[TMI]    <- M[BRD + pos]
@102 2216	///             0102 [2216]: LDA 216   (        VM2)	// AC        <- -2
@103 31e0	///             0103 [31e0]: STA 1e0   (      CNT_2)	// M[CNT_2]  <- -2
// loop check board : i = 1, 2 (BRD[pos] == BRD[pos + offset * i])
@104 21e2	///    L_CHK_3: 0104 [21e2]: LDA 1e2   (      P_BRD)	// AC        <- BRD + pos + offset * (i - 1)
@105 11e5	///             0105 [11e5]: ADD 1e5   (    BRD_OFS)	// AC        <- BRD + pos + offset * i
@106 31e2	///             0106 [31e2]: STA 1e2   (      P_BRD)	// M[P_BRD]  <- BRD + pos + offset * i
@107 a1e2	///             0107 [a1e2]: LDA 1e2 I (      P_BRD)	// AC        <- M[BRD + pos + offset * i]
@108 50f5	///             0108 [50f5]: BSA 0f5   (   CHK_CH_N)	// call check character
@109 7004	///             0109 [7004]: SZA                    	// (AC == 0) ? skip next
@10a 4110	///             010a [4110]: BUN 110   (  R_CHK_3_0)	// goto R_CHK_3_0 (return 0)
@10b 61e0	///             010b [61e0]: ISZ 1e0   (      CNT_2)	// ((++M[CNT_2]) = 0) ? skip next
@10c 4104	///             010c [4104]: BUN 104   (    L_CHK_3)	// goto L_CHK_3 (loop check board)
// this is 3-in-a-row!!
@10d 21db	///             010d [21db]: LDA 1db   (        TMI)	// AC        <- M[BRD + pos] (winner mark)
@10e 3202	///             010e [3202]: STA 202   (     WINNER)	// M[WINNER] <- winner mark
@10f c0fa	///             010f [c0fa]: BUN 0fa I (      CHK_3)	// return from CHK_3
@110 7800	///  R_CHK_3_0: 0110 [7800]: CLA                    	// AC <- 0
@111 c0fa	///             0111 [c0fa]: BUN 0fa I (      CHK_3)	// return from CHK_3
@112 0000	///    CHK_WIN: 0112 [0000]: (    0:    0)            
//////////// subroutine (check winner)  ///////////
// return AC (winner) : 'O' or 'X' or 0 (no winner)
@113 2219	///             0113 [2219]: LDA 219   (        VM8)	// AC         <- -8
@114 31df	///             0114 [31df]: STA 1df   (      CNT_1)	// M[CNT_1]   <- 8
@115 22d1	///             0115 [22d1]: LDA 2d1   (       A_CW)	// AC         <- M[A_CW] (CW)
@116 32d0	///             0116 [32d0]: STA 2d0   (       P_CW)	// M[P_CW]    <- CW
// loop check winner
@117 a2d0	///  L_CHK_WIN: 0117 [a2d0]: LDA 2d0 I (       P_CW)	// AC         <- M[M[P_CW]] (offset)
@118 31e5	///             0118 [31e5]: STA 1e5   (    BRD_OFS)	// M[BRD_OFS] <- offset
@119 62d0	///             0119 [62d0]: ISZ 2d0   (       P_CW)	// ++M[P_CW]
@11a a2d0	///             011a [a2d0]: LDA 2d0 I (       P_CW)	// AC         <- M[M[P_CW]] (pos)
@11b 62d0	///             011b [62d0]: ISZ 2d0   (       P_CW)	// ++M[P_CW]
@11c 50fa	///             011c [50fa]: BSA 0fa   (      CHK_3)	// call CHK_3
@11d 7004	///             011d [7004]: SZA                    	// (AC == 0) ? skip next
@11e c112	///             011e [c112]: BUN 112 I (    CHK_WIN)	// return from CHK_WIN (AC != 0 : winner mark)
@11f 61df	///             011f [61df]: ISZ 1df   (      CNT_1)	// ((++M[CNT_1]) == 0) ? skip next
@120 4117	///             0120 [4117]: BUN 117   (  L_CHK_WIN)	// goto L_CHK_WIN (loop check winner)
@121 c112	///             0121 [c112]: BUN 112 I (    CHK_WIN)	// return from CHK_WIN (AC == 0 : no winner)
@122 0000	///  MY_DM_MOV: 0122 [0000]: (    0:    0)            
/////////// subroutine (my dumb move) //////////
@123 2203	///             0123 [2203]: LDA 203   (      A_BRD)	// AC <- M[A_BRD] (BRD)
@124 31e2	///             0124 [31e2]: STA 1e2   (      P_BRD)	// M[P_BRD] <- BRD
// loop check board : pos = 0, 1, ... 8
@125 a1e2	///  L_CHK_BRD: 0125 [a1e2]: LDA 1e2 I (      P_BRD)	// AC <- M[BRD + pos]
@126 7004	///             0126 [7004]: SZA                    	// (M[BRD + pos] == 0) ? skip next
@127 4129	///             0127 [4129]: BUN 129   (  N_CHK_BRD)	// goto N_CHK_BRD
@128 c122	///             0128 [c122]: BUN 122 I (  MY_DM_MOV)	// return from MY_DM_MOV
@129 61e2	///  N_CHK_BRD: 0129 [61e2]: ISZ 1e2   (      P_BRD)	// ++M[P_BRD]
@12a 4125	///             012a [4125]: BUN 125   (  L_CHK_BRD)	// goto L_CHK_BRD (loop check board)
@12b 0000	///     MY_MOV: 012b [0000]: (    0:    0)            
/////////// subroutine (my move) //////////
// M[BRD_POS] : pos
@12c 7800	///             012c [7800]: CLA                    	// AC          <- 0
@12d 31e6	///             012d [31e6]: STA 1e6   (    BRD_POS)	// M[BRD_POS]  <- 0 (pos = 0)
@12e 31e7	///             012e [31e7]: STA 1e7   (    N_P_BRD)	// M[N_P_BRD]  <- 0
@12f 2203	///             012f [2203]: LDA 203   (      A_BRD)	// AC          <- M[A_BRD] (BRD)
@130 31e2	///             0130 [31e2]: STA 1e2   (      P_BRD)	// M[P_BRD]    <- BRD
@131 221a	///             0131 [221a]: LDA 21a   (        VM9)	// AC          <- -9
@132 31e0	///             0132 [31e0]: STA 1e0   (      CNT_2)	// M[CNT_2]    <- -9
// loop check board : pos = 0, 1, ... 8
@133 a1e2	///  L_CHK_POS: 0133 [a1e2]: LDA 1e2 I (      P_BRD)	// AC          <- M[BRD + pos]
@134 7004	///             0134 [7004]: SZA                    	// (M[BRD + pos] == 0) ? skip next
@135 4139	///             0135 [4139]: BUN 139   (  N_CHK_POS)	// goto N_CHK_POS (++pos) (M[BRD + pos] != 0 : occupied)
@136 514e	///             0136 [514e]: BSA 14e   (        WBF)	// call WBF (WinBlockFork)
@137 7004	///             0137 [7004]: SZA                    	// (AC == 0) ? skip next
@138 c12b	///             0138 [c12b]: BUN 12b I (     MY_MOV)	// return from MY_MOV
// ++pos
@139 61e6	///  N_CHK_POS: 0139 [61e6]: ISZ 1e6   (    BRD_POS)	// ++M[BRD_POS]
@13a 61e2	///             013a [61e2]: ISZ 1e2   (      P_BRD)	// ++M[P_BRD]
@13b 61e0	///             013b [61e0]: ISZ 1e0   (      CNT_2)	// ((++M[CNT_2]) == 0) ? skip next
@13c 4133	///             013c [4133]: BUN 133   (  L_CHK_POS)	// goto L_CHK_BRD (loop check board)
// check (M[N_P_BRD] != 0) ? 
@13d 21e7	///             013d [21e7]: LDA 1e7   (    N_P_BRD)	// AC <- M[N_P_BRD]
@13e 7004	///             013e [7004]: SZA                    	// (M[N_P_BRDto
@13f 4142	///             013f [4142]: BUN 142   (PUT_NXT_POS)	// goto PUT_NXT_POS (M[N_P_BRD] != 0)
@140 5122	///             0140 [5122]: BSA 122   (  MY_DM_MOV)	// call MY_DM_MOV (my dumb move)
@141 c12b	///             0141 [c12b]: BUN 12b I (     MY_MOV)	// return from MY_MOV
@142 31e2	///PUT_NXT_POS: 0142 [31e2]: STA 1e2   (      P_BRD)	// M[P_BRD]     <- M[N_P_BRD]
@143 c12b	///             0143 [c12b]: BUN 12b I (     MY_MOV)	// return from MY_MOV
@144 0000	///    LD_TBRD: 0144 [0000]: (    0:    0)            
/////////// subroutine (load traslated board position) //////////
// arg 0 (AC) : table-addr (H1, H2, V1, V2, D1, D2, D3, D4)
// M[BRD_POS] : pos
// return (AC < 0) : invalid transposition (happens on diagonal translations on edge positions)
// return (AC >= 0) : translated board position (M[BRD + M[table-addr + pos]])
@145 11e6	///             0145 [11e6]: ADD 1e6   (    BRD_POS)	// AC <- table-addr + pos
@146 31d9	///             0146 [31d9]: STA 1d9   (        TMA)	// M[TMA] <- table-addr + pos
@147 a1d9	///             0147 [a1d9]: LDA 1d9 I (        TMA)	// AC <- M[table-addr + pos]
@148 7010	///             0148 [7010]: SPA                    	// (M[table-addr + pos] >= 0) ? skip next
@149 c144	///             0149 [c144]: BUN 144 I (    LD_TBRD)	// return from LD_TBRD (AC < 0 : invalid translation)
@14a 1203	///             014a [1203]: ADD 203   (      A_BRD)	// AC <- BRD + M[table-addr + pos]
@14b 31d9	///             014b [31d9]: STA 1d9   (        TMA)	// M[TMA] <- BRD + M[table-addr + pos]
@14c a1d9	///             014c [a1d9]: LDA 1d9 I (        TMA)	// AC <- M[BRD + M[table-addr + pos]]
@14d c144	///             014d [c144]: BUN 144 I (    LD_TBRD)	// return from LD_TBRD (AC >= 0 : valid translated board position)
@14e 0000	///        WBF: 014e [0000]: (    0:    0)            
/////////// subroutine (WinBlockFork) //////////
// M[BRD_POS] : pos
// return 0 : not my win...
// return 1 : my win!!!
@14f 7800	///             014f [7800]: CLA                    	// AC <- 0
@150 31eb	///             0150 [31eb]: STA 1eb   (      MY_LN)	// M[MY_LN] <- 0
@151 31ec	///             0151 [31ec]: STA 1ec   (     MY_BLK)	// M[MY_BLK] <- 0
@152 22e3	///             0152 [22e3]: LDA 2e3   (      A_HVD)	// AC <- M[A_HVD] (HVD)
@153 32e2	///             0153 [32e2]: STA 2e2   (      P_HVD)	// M[P_HVD] <- HVD (M[HVD] = {H1, H2, V1, V2, D1, D2, D3, D4})
@154 2218	///             0154 [2218]: LDA 218   (        VM4)	// AC <- -4
@155 31df	///             0155 [31df]: STA 1df   (      CNT_1)	// M[CNT_1] <- -4
// loop WBF
@156 a2e2	///      L_WBF: 0156 [a2e2]: LDA 2e2 I (      P_HVD)	// AC <- M[HVD] ({H1, H2, V1, V2, D1, D2, D3, D4})
@157 62e2	///             0157 [62e2]: ISZ 2e2   (      P_HVD)	// ++M[P_HVD]
// load BRD_1
@158 5144	///             0158 [5144]: BSA 144   (    LD_TBRD)	// call LD_TBRD (load translated board position)
@159 7010	///             0159 [7010]: SPA                    	// (M[BRD + M[M[HVD] + pos]] >= 0) ? skip next
@15a 4165	///             015a [4165]: BUN 165   (      WBF_2)	// goto WBF_2 (invalid transposition : exit L_WBF loop)
@15b 31e8	///             015b [31e8]: STA 1e8   (      BRD_1)	// M[BRD_1] <- M[BRD + M[M[HVD] + pos]]
@15c a2e2	///             015c [a2e2]: LDA 2e2 I (      P_HVD)	// AC <- M[HVD] ({H1, H2, V1, V2, D1, D2, D3, D4})
@15d 62e2	///             015d [62e2]: ISZ 2e2   (      P_HVD)	// ++M[P_HVD]
// load BRD_2
@15e 5144	///             015e [5144]: BSA 144   (    LD_TBRD)	// call LD_TBRD (load translated board position)
@15f 31e9	///             015f [31e9]: STA 1e9   (      BRD_2)	// M[BRD_2] <- M[BRD + M[HVD] + pos]]
// call WBF_POS (WinBlockForkPos)
@160 5173	///             0160 [5173]: BSA 173   (    WBF_POS)	// call WBF_POS (WinBlockForkPos)
@161 7004	///             0161 [7004]: SZA                    	// (AC == 0) ? skip next
@162 c14e	///             0162 [c14e]: BUN 14e I (        WBF)	// return from WBF (return 1 : my win!!!)
@163 61df	///             0163 [61df]: ISZ 1df   (      CNT_1)	// ((++M[CNT_1]) == 0) ? skip next
@164 4156	///             0164 [4156]: BUN 156   (      L_WBF)	// goto (loop WBF)
// (M[MY_BLK] != 0 || M[MY_LN] >= 2 && M[N_P_BRD] == 0) ? M[N_P_BRD] <- M[P_BRD]
@165 21ec	///      WBF_2: 0165 [21ec]: LDA 1ec   (     MY_BLK)	// AC <- M[MY_BLK]
@166 7004	///             0166 [7004]: SZA                    	// (M[MY_BLK] == 0) ? skip next
@167 416f	///             0167 [416f]: BUN 16f   (   SET_NPOS)	// goto SET_NPOS (M[MY_BLK] > 0 : need to block this position)
// check my fork (M[MY_LN] >= 2)
@168 21eb	///             0168 [21eb]: LDA 1eb   (      MY_LN)	// AC <- M[MY_LN]
@169 1216	///             0169 [1216]: ADD 216   (        VM2)	// AC <- M[MY_LN] - 2
@16a 7010	///             016a [7010]: SPA                    	// (M[MY_LN] >= 2) ? skip next
@16b 4171	///             016b [4171]: BUN 171   (    R_WBF_0)	// goto R_WBF_0 (skip SET_NPOS)
// check (M[N_P_BRD] != 0)
@16c 21e7	///             016c [21e7]: LDA 1e7   (    N_P_BRD)	// AC <- M[N_P_BRD]
@16d 7004	///             016d [7004]: SZA                    	// (M[N_P_BRD] != 0) ? skip next
@16e 4171	///             016e [4171]: BUN 171   (    R_WBF_0)	// goto R_WBF_0 (skip SET_NPOS)
@16f 21e2	///   SET_NPOS: 016f [21e2]: LDA 1e2   (      P_BRD)	// AC <- current BRD pointer
@170 31e7	///             0170 [31e7]: STA 1e7   (    N_P_BRD)	// M[N_P_BRD] <- current BRD pointer (I should take this position if I don't win this turn)
// return 0 : not my win...
@171 7800	///    R_WBF_0: 0171 [7800]: CLA                    	// AC <- 0
@172 c14e	///             0172 [c14e]: BUN 14e I (        WBF)	// return from WBF (not my win...)
@173 0000	///    WBF_POS: 0173 [0000]: (    0:    0)            
/////////// subroutine (WinBlockForkPos) //////////
// M[BRD_1] : brd[pos1]
// M[BRD_2] : brd[pos2]
// return 0 : not my win...
// return 1 : my win!!!
@174 21e8	///             0174 [21e8]: LDA 1e8   (      BRD_1)	// AC           <- M[BRD_1]
@175 11e9	///             0175 [11e9]: ADD 1e9   (      BRD_2)	// AC           <- M[BRD_1] + M[BRD_2]
@176 7200	///             0176 [7200]: CMA                    
@177 7020	///             0177 [7020]: INC                    	// AC           <- -(M[BRD_1] + M[BRD_2])
@178 31ea	///             0178 [31ea]: STA 1ea   (  BRD_SUM_N)	// M[BRD_SUM_N] <- -(M[BRD_1] + M[BRD_2])
// check my two-in-a-row : (M[BRD_1] == M[BRD_2] == M[MY_MK])
@179 1221	///             0179 [1221]: ADD 221   (    MY_MK_2)	// AC <- M[MY_MK_2] - (M[BRD_1] + M[BRD_2]) (M[MY_MK_2] = M[MY_MK] * 2)
@17a 7004	///             017a [7004]: SZA                    	// (M[MY_MK] * 2 == M[BRD_1] + M[BRD_2]) ? skip next
@17b 417e	///             017b [417e]: BUN 17e   (    CHK_YL2)	// goto CHK_YL2 (check your two-in-a-row)
@17c 220f	///             017c [220f]: LDA 20f   (        VH1)	// AC           <- 1
@17d c173	///             017d [c173]: BUN 173 I (    WBF_POS)	// return from WBF_POS (return AC = 1 : my win!!!)
// check your two-in-a-row (M[BRD_1] == M[BRD_2] == M[YR_MK])
@17e 21ea	///    CHK_YL2: 017e [21ea]: LDA 1ea   (  BRD_SUM_N)	// AC           <- -(M[BRD_1] + M[BRD_2])
@17f 1222	///             017f [1222]: ADD 222   (    YR_MK_2)	// AC           <- M[YR_MK_2] - (M[BRD_1] + M[BRD_2]) (M[YR_MK_2] = M[YR_MK] * 2)
@180 7004	///             0180 [7004]: SZA                    	// (M[YR_MK] * 2 == M[BRD_2] + M[BRD_1]) ? skip next
@181 4184	///             0181 [4184]: BUN 184   (    CHK_ML1)	// goto CHK_MY1 (check myLine)
@182 61ec	///             0182 [61ec]: ISZ 1ec   (     MY_BLK)	// ++M[MY_BLK] (block your two-in-a-row)
@183 c173	///             0183 [c173]: BUN 173 I (    WBF_POS)	// return from WBF_POS (return AC = 0)
// check myLine (M[MY_MK] == M[BRD_2] + M[BRD_1])
@184 21ea	///    CHK_ML1: 0184 [21ea]: LDA 1ea   (  BRD_SUM_N)	// AC           <- -(M[BRD_1] + M[BRD_2])
@185 121f	///             0185 [121f]: ADD 21f   (      MY_MK)	// AC           <- M[MY_MK] - (M[BRD_1] + M[BRD_2])
@186 7004	///             0186 [7004]: SZA                    	// (M[MY_MK] == M[BRD_2] + M[BRD_1]) ? skip next
@187 4189	///             0187 [4189]: BUN 189   (R_WBF_POS_0)	// goto R_WBR_POS_0 (return 0)
@188 61eb	///             0188 [61eb]: ISZ 1eb   (      MY_LN)	// ++M[MY_LN]
// return 0
@189 7800	///R_WBF_POS_0: 0189 [7800]: CLA                    	// AC           <- 0
@18a c173	///             018a [c173]: BUN 173 I (    WBF_POS)	// return from WBF_POS (return AC = 0)
@18b 0000	///    SET_MGP: 018b [0000]: (    0:    0)            
/////////// subroutine (set single message for P_OUT) //////////
// arg(1) : message address
@18c 7800	///             018c [7800]: CLA                    	// AC <- 0
@18d 7200	///             018d [7200]: CMA                    	// AC <- -1
@18e 31f3	///             018e [31f3]: STA 1f3   (     CNT_MG)	// M[CNT_MG]      <- - 1 (message count = 1)
@18f 21f5	///             018f [21f5]: LDA 1f5   (   A_MG_LST)	// AC             <- M[A_MG_LST] (MG_LIST)
@190 31f4	///             0190 [31f4]: STA 1f4   (   P_MG_LST)	// M[P_MG_LST]    <- MG_LIST
@191 a18b	///             0191 [a18b]: LDA 18b I (    SET_MGP)	// AC             <- M[M[SET_MGP]] (arg(i))
@192 b1f4	///             0192 [b1f4]: STA 1f4 I (   P_MG_LST)	// M[MG_LIST]     <- arg(1)
// load 1st message
@193 51b2	///             0193 [51b2]: BSA 1b2   (     LD_MSG)	// call LD_MSG (load message info)
// output to P_OUT
@194 f010	///             0194 [f010]: PIO                    	// IOT <- 0 (parallel-IO selected)
@195 220f	///             0195 [220f]: LDA 20f   (        VH1)	// AC <- 1
@196 f008	///             0196 [f008]: IMK                    	// IMSK <- 0001 (P_OUT enabled)
@197 618b	///             0197 [618b]: ISZ 18b   (    SET_MGP)	// ++M[SET_MGP]
@198 c18b	///             0198 [c18b]: BUN 18b I (    SET_MGP)	// return from SET_MGP
@199 0000	///     SET_ML: 0199 [0000]: (    0:    0)            
/////////// subroutine (set message list for S_OUT) //////////
// arg0 (AC) : msg_count
// arg(1), arg(2), ... : message addresses (# of arguments = msg_count)
@19a 7020	///             019a [7020]: INC                    	// AC             <- (msg_count + 1)
@19b 7200	///             019b [7200]: CMA                    	// AC             <- - (msg_count + 2)
@19c 31f3	///             019c [31f3]: STA 1f3   (     CNT_MG)	// M[CNT_MG]      <- - (msg_count + 2) (2 newlines)
@19d 7020	///             019d [7020]: INC                    
@19e 7020	///             019e [7020]: INC                    
@19f 31d9	///             019f [31d9]: STA 1d9   (        TMA)	// M[TMA]         <- - msg_count
@1a0 21f5	///             01a0 [21f5]: LDA 1f5   (   A_MG_LST)	// AC             <- M[A_MG_LST] (MG_LIST)
@1a1 31f4	///             01a1 [31f4]: STA 1f4   (   P_MG_LST)	// M[P_MG_LST]    <- MG_LIST
@1a2 31da	///             01a2 [31da]: STA 1da   (        TMB)	// M[TMB]         <- MG_LIST
// put 1st newline at head
@1a3 223d	///             01a3 [223d]: LDA 23d   (    A_MG_NL)	// AC             <- M[A_MG_NL] (MG_NL)
@1a4 b1da	///             01a4 [b1da]: STA 1da I (        TMB)	// M[M[TMB]]      <- MG_NL
@1a5 61da	///             01a5 [61da]: ISZ 1da   (        TMB)	// ++M[TMB]
// loop set message : i = 1, 2, ..., msg_count
@1a6 a199	///   L_SET_ML: 01a6 [a199]: LDA 199 I (     SET_ML)	// AC             <- M[M[SET_ML]] (arg(i))
@1a7 b1da	///             01a7 [b1da]: STA 1da I (        TMB)	// M[MG_LIST + i] <- arg(i)
@1a8 6199	///             01a8 [6199]: ISZ 199   (     SET_ML)	// ++M[SET_ML]
@1a9 61da	///             01a9 [61da]: ISZ 1da   (        TMB)	// ++M[TMB]
@1aa 61d9	///             01aa [61d9]: ISZ 1d9   (        TMA)	// ((++M[TMA]) == 0) ? skip next
@1ab 41a6	///             01ab [41a6]: BUN 1a6   (   L_SET_ML)	// goto L_SET_ML (loop set message)
// put 2nd newline at head
@1ac 223d	///             01ac [223d]: LDA 23d   (    A_MG_NL)	// AC             <- M[A_MG_NL] (MG_NL)
@1ad b1da	///             01ad [b1da]: STA 1da I (        TMB)	// M[MG_LIST + msg_count + 1] <- MG_NL
// load 1st message
@1ae 51b2	///             01ae [51b2]: BSA 1b2   (     LD_MSG)	// call LD_MSG (load message info)
// output to S_OUT
@1af 2212	///             01af [2212]: LDA 212   (        VH4)	// AC <- 4
@1b0 f008	///             01b0 [f008]: IMK                    	// IMSK <- 0100 (S_OUT enabled)
@1b1 c199	///             01b1 [c199]: BUN 199 I (     SET_ML)	// return from SET_ML
@1b2 0000	///     LD_MSG: 01b2 [0000]: (    0:    0)            
/////////// subroutine (load message info) //////////
@1b3 a1f4	///             01b3 [a1f4]: LDA 1f4 I (   P_MG_LST)	// AC        <- M[M[P_MG_LST]] (message address)
@1b4 31de	///             01b4 [31de]: STA 1de   (     PTR_MG)	// M[PTR_MG] <- M[M[P_MG_LST]] (message address)
@1b5 a1de	///             01b5 [a1de]: LDA 1de I (     PTR_MG)	// AC        <- M[M[PTR_MG]] (message length)
@1b6 7200	///             01b6 [7200]: CMA                    
@1b7 7020	///             01b7 [7020]: INC                    	// AC        <- - (message length)
@1b8 31e1	///             01b8 [31e1]: STA 1e1   (     CNT_CH)	// M[CNT_CH] <- message count
@1b9 61de	///             01b9 [61de]: ISZ 1de   (     PTR_MG)	// ++M[PTR_MG] (message starts from the next address)
@1ba 61f4	///             01ba [61f4]: ISZ 1f4   (   P_MG_LST)	// ++M[P_MG_LST]
@1bb c1b2	///             01bb [c1b2]: BUN 1b2 I (     LD_MSG)	// return from SET_MSG
/////////// process output //////////
@1bc f100	///    PUT_OUT: 01bc [f100]: SKO                    	// (FGO = 0) ? skip next
@1bd 4042	///             01bd [4042]: BUN 042   (        IRT)	// goto IRT (return from interrupt handler) --> this should not happen...
// output 1 message character at address M[PTR_MG]
@1be a1de	///             01be [a1de]: LDA 1de I (     PTR_MG)	// AC   <- M[M[PTR_MG]]
@1bf f400	///             01bf [f400]: OUT                    	// OUTR <- AC(7:0)
@1c0 61de	///             01c0 [61de]: ISZ 1de   (     PTR_MG)	// ++M[PTR_MG]
@1c1 61e1	///             01c1 [61e1]: ISZ 1e1   (     CNT_CH)	// ((++M[CNT_CH]) == 0) ? skip next
// message string pending ...
@1c2 4042	///             01c2 [4042]: BUN 042   (        IRT)	// goto IRT (return from interrupt handler)
// message string terminated
@1c3 61f3	///             01c3 [61f3]: ISZ 1f3   (     CNT_MG)	// ((++M[CNT_MG]) = 0) ? skip next
@1c4 41d2	///             01c4 [41d2]: BUN 1d2   (    NXT_MSG)	// goto NXT_MSG (load next message)
// all message processed
@1c5 7800	///             01c5 [7800]: CLA                    	// AC         <- 0
@1c6 31f1	///             01c6 [31f1]: STA 1f1   (    OUT_STT)	// M[OUT_STT] <- 0
@1c7 21f0	///             01c7 [21f0]: LDA 1f0   (    NXT_STT)	// AC         <- M[NXT_STT]
@1c8 31ef	///             01c8 [31ef]: STA 1ef   (        STT)	// M[STT]     <- M[NXT_STT]
@1c9 f020	///             01c9 [f020]: SIO                    	// IOT <- 1 (serial-IO selected)
@1ca 21ee	///             01ca [21ee]: LDA 1ee   (    NXT_BYE)	// AC         <- M[NXT_BYE]
@1cb 31ed	///             01cb [31ed]: STA 1ed   (        BYE)	// M[BYE]     <- M[NXT_BYE]
@1cc 7004	///             01cc [7004]: SZA                    	// (AC = 0) ? skip next
@1cd 41d4	///             01cd [41d4]: BUN 1d4   (    CHG_INP)	// goto CHG_INP (M[BYE] = 1 : prepare to terminate program...)
@1ce 21f2	///             01ce [21f2]: LDA 1f2   (    NXT_INP)	// AC <- M[NXT_INP]
@1cf 7004	///             01cf [7004]: SZA                    	// (AC = 0) ? skip next
@1d0 41d4	///             01d0 [41d4]: BUN 1d4   (    CHG_INP)	// goto CHG_INP (M[NXT_INP] = 1 : change to input mode)
@1d1 402f	///             01d1 [402f]: BUN 02f   (     STT_SW)	// goto STT_SW (state switch)
// load next message
@1d2 51b2	///    NXT_MSG: 01d2 [51b2]: BSA 1b2   (     LD_MSG)	// call LD_MSG (load message info)
@1d3 4042	///             01d3 [4042]: BUN 042   (        IRT)	// goto IRT (return from interrupt handler)
// change to input mode
@1d4 7800	///    CHG_INP: 01d4 [7800]: CLA                    	// AC         <- 0
@1d5 31f2	///             01d5 [31f2]: STA 1f2   (    NXT_INP)	// M[NXT_INP] <- 0
@1d6 2214	///             01d6 [2214]: LDA 214   (        VH8)	// AC         <- 8
@1d7 f008	///             01d7 [f008]: IMK                    	// IMSK       <- 1000 (S_IN enabled)
@1d8 4042	///             01d8 [4042]: BUN 042   (        IRT)	// goto IRT (return from interrupt handler)
// data (no initialization)
@1d9 0000	///        TMA: 01d9 [0000]: (    0:    0)            	// temporal
@1da 0000	///        TMB: 01da [0000]: (    0:    0)            	// temporal
@1db 0000	///        TMI: 01db [0000]: (    0:    0)            	// char (raw) input
@1dc 0000	///         BA: 01dc [0000]: (    0:    0)            	// backup storage for AC during interrupt handling
@1dd 0000	///         BE: 01dd [0000]: (    0:    0)            	// backup storage for  E during interrupt handling
@1de 0000	///     PTR_MG: 01de [0000]: (    0:    0)            	// message pointer
@1df 0000	///      CNT_1: 01df [0000]: (    0:    0)            	// counter 1
@1e0 0000	///      CNT_2: 01e0 [0000]: (    0:    0)            	// counter 2
@1e1 0000	///     CNT_CH: 01e1 [0000]: (    0:    0)            	// char counter
@1e2 0000	///      P_BRD: 01e2 [0000]: (    0:    0)            	// pointer to BRD
@1e3 0000	///   P_MY_LNC: 01e3 [0000]: (    0:    0)            	// pointer to MY_LNC
@1e4 0000	///   P_YR_LNC: 01e4 [0000]: (    0:    0)            	// pointer to YR_LNC
@1e5 0000	///    BRD_OFS: 01e5 [0000]: (    0:    0)            	// BRD offset
@1e6 0000	///    BRD_POS: 01e6 [0000]: (    0:    0)            	// BRD pos
@1e7 0000	///    N_P_BRD: 01e7 [0000]: (    0:    0)            	// pointer to BRD for my next move
@1e8 0000	///      BRD_1: 01e8 [0000]: (    0:    0)            	// brd[pos1]
@1e9 0000	///      BRD_2: 01e9 [0000]: (    0:    0)            	// brd[pos2]
@1ea 0000	///  BRD_SUM_N: 01ea [0000]: (    0:    0)            	// -(brd[pos1] + brd[pos2])
@1eb 0000	///      MY_LN: 01eb [0000]: (    0:    0)            	// myLine
@1ec 0000	///     MY_BLK: 01ec [0000]: (    0:    0)            	// myBlock
// data (need initialization code : one-time)
@1ed 0000	///        BYE: 01ed [0000]: (    0:    0)            	// (init: 0) bye
@1ee 0000	///    NXT_BYE: 01ee [0000]: (    0:    0)            	// (init: 0) next bye
@1ef 0000	///        STT: 01ef [0000]: (    0:    0)            	// (init: 0) current state
@1f0 0000	///    NXT_STT: 01f0 [0000]: (    0:    0)            	// (init: 0) next state
@1f1 0000	///    OUT_STT: 01f1 [0000]: (    0:    0)            	// (init: 0) output state
@1f2 0000	///    NXT_INP: 01f2 [0000]: (    0:    0)            	// (init: 0) next process input
@1f3 0000	///     CNT_MG: 01f3 [0000]: (    0:    0)            	// message count
@1f4 0000	///   P_MG_LST: 01f4 [0000]: (    0:    0)            	// message list pointer
@1f5 01f6	///   A_MG_LST: 01f5 [01f6]: (  502:  502)            
@1f6 0000	///     MG_LST: 01f6 [0000]: (    0:    0)            	// message pointer list (up to 8+2 messages)
@1f7 0000	///             01f7 [0000]: (    0:    0)            
@1f8 0000	///             01f8 [0000]: (    0:    0)            
@1f9 0000	///             01f9 [0000]: (    0:    0)            
@1fa 0000	///             01fa [0000]: (    0:    0)            
@1fb 0000	///             01fb [0000]: (    0:    0)            
@1fc 0000	///             01fc [0000]: (    0:    0)            
@1fd 0000	///             01fd [0000]: (    0:    0)            
@1fe 0000	///             01fe [0000]: (    0:    0)            
@1ff 0000	///             01ff [0000]: (    0:    0)            
// data (need initialization code : after every game -> INI_GM)
@200 0000	///    CNT_MOV: 0200 [0000]: (    0:    0)            	// move counter
@201 0000	///       TURN: 0201 [0000]: (    0:    0)            	// 0 : your turn, 1 : my turn
@202 0000	///     WINNER: 0202 [0000]: (    0:    0)            	// winner
// BRD : brd[9]
// position : on screen
//    012       123
//    345       456
//    678       789
@203 0204	///      A_BRD: 0203 [0204]: (  516:  516)            
@204 0000	///        BRD: 0204 [0000]: (    0:    0)            
@205 0000	///             0205 [0000]: (    0:    0)            
@206 0000	///             0206 [0000]: (    0:    0)            
@207 0000	///             0207 [0000]: (    0:    0)            
@208 0000	///             0208 [0000]: (    0:    0)            
@209 0000	///             0209 [0000]: (    0:    0)            
@20a 0000	///             020a [0000]: (    0:    0)            
@20b 0000	///             020b [0000]: (    0:    0)            
@20c 0000	///             020c [0000]: (    0:    0)            
// data (read-only)
@20d fff0	///        AMK: 020d [fff0]: (  -16:65520)            	// AMK = FFF0 (and mask)
@20e 000f	///       AMKN: 020e [000f]: (   15:   15)            	// AMKN = 000F (and mask negated)
@20f 0001	///        VH1: 020f [0001]: (    1:    1)            	// VH1 = 1
@210 0002	///        VH2: 0210 [0002]: (    2:    2)            	// VH2 = 2
@211 0003	///        VH3: 0211 [0003]: (    3:    3)            	// VH3 = 3
@212 0004	///        VH4: 0212 [0004]: (    4:    4)            	// VH4 = 4
@213 0005	///        VH5: 0213 [0005]: (    5:    5)            	// VH5 = 5
@214 0008	///        VH8: 0214 [0008]: (    8:    8)            	// VH5 = 8
@215 ffff	///        VM1: 0215 [ffff]: (   -1:65535)            	// VM1 = -1
@216 fffe	///        VM2: 0216 [fffe]: (   -2:65534)            	// VM2 = -2
@217 fffd	///        VM3: 0217 [fffd]: (   -3:65533)            	// VM2 = -3
@218 fffc	///        VM4: 0218 [fffc]: (   -4:65532)            	// VM2 = -4
@219 fff8	///        VM8: 0219 [fff8]: (   -8:65528)            	// VM2 = -8
@21a fff7	///        VM9: 021a [fff7]: (   -9:65527)            	// VM2 = -9
@21b fff6	///       VM10: 021b [fff6]: (  -10:65526)            	// VM10 = -10
@21c 0030	///       CH_0: 021c [0030]: (   48:  '0')            
@21d 0031	///       CH_1: 021d [0031]: (   49:  '1')            
@21e 0079	///      CH_LY: 021e [0079]: (  121:  'y')            
@21f 0058	///      MY_MK: 021f [0058]: (   88:  'X')            
@220 004f	///      YR_MK: 0220 [004f]: (   79:  'O')            
@221 00b0	///    MY_MK_2: 0221 [00b0]: (  176:  176)            	// (0x58('X') * 2)
@222 009e	///    YR_MK_2: 0222 [009e]: (  158:  158)            	// (0x4F('O') * 2)
@223 0017	///    MG_WELC: 0223 [0017]: (   23:   23)            	// MG_WELC length
@224 0057	///             0224 [0057]: (   87:  'W')            
@225 0045	///             0225 [0045]: (   69:  'E')            
@226 004c	///             0226 [004c]: (   76:  'L')            
@227 0043	///             0227 [0043]: (   67:  'C')            
@228 004f	///             0228 [004f]: (   79:  'O')            
@229 004d	///             0229 [004d]: (   77:  'M')            
@22a 0045	///             022a [0045]: (   69:  'E')            
@22b 0020	///             022b [0020]: (   32:  ' ')            	// ' '
@22c 0054	///             022c [0054]: (   84:  'T')            
@22d 004f	///             022d [004f]: (   79:  'O')            
@22e 0020	///             022e [0020]: (   32:  ' ')            	// ' '
@22f 0054	///             022f [0054]: (   84:  'T')            
@230 0049	///             0230 [0049]: (   73:  'I')            
@231 0043	///             0231 [0043]: (   67:  'C')            
@232 002d	///             0232 [002d]: (   45:  '-')            
@233 0054	///             0233 [0054]: (   84:  'T')            
@234 0041	///             0234 [0041]: (   65:  'A')            
@235 0043	///             0235 [0043]: (   67:  'C')            
@236 002d	///             0236 [002d]: (   45:  '-')            
@237 0054	///             0237 [0054]: (   84:  'T')            
@238 004f	///             0238 [004f]: (   79:  'O')            
@239 0045	///             0239 [0045]: (   69:  'E')            
@23a 0021	///             023a [0021]: (   33:  '!')            
@23b 0001	///   MG_MY_MV: 023b [0001]: (    1:    1)            	// MG_MY_MV length
@23c 0000	///  MG_MY_MV0: 023c [0000]: (    0:    0)            
@23d 023e	///    A_MG_NL: 023d [023e]: (  574:  574)            
@23e 0001	///      MG_NL: 023e [0001]: (    1:    1)            	// MG_NL length
@23f 000a	///             023f [000a]: (   10:   10)            	// '\n'
@240 0008	///     MG_BYE: 0240 [0008]: (    8:    8)            	// MG_BYE length
@241 0062	///             0241 [0062]: (   98:  'b')            
@242 0079	///             0242 [0079]: (  121:  'y')            
@243 0065	///             0243 [0065]: (  101:  'e')            
@244 002d	///             0244 [002d]: (   45:  '-')            
@245 0062	///             0245 [0062]: (   98:  'b')            
@246 0079	///             0246 [0079]: (  121:  'y')            
@247 0065	///             0247 [0065]: (  101:  'e')            
@248 0021	///             0248 [0021]: (   33:  '!')            
@249 024a	///   A_MG_YMV: 0249 [024a]: (  586:  586)            
@24a 000a	///     MG_YMV: 024a [000a]: (   10:   10)            	// MG_YMV length
@24b 0079	///             024b [0079]: (  121:  'y')            
@24c 006f	///             024c [006f]: (  111:  'o')            
@24d 0075	///             024d [0075]: (  117:  'u')            
@24e 0072	///             024e [0072]: (  114:  'r')            
@24f 0020	///             024f [0020]: (   32:  ' ')            	// ' '
@250 006d	///             0250 [006d]: (  109:  'm')            
@251 006f	///             0251 [006f]: (  111:  'o')            
@252 0076	///             0252 [0076]: (  118:  'v')            
@253 0065	///             0253 [0065]: (  101:  'e')            
@254 0021	///             0254 [0021]: (   33:  '!')            
@255 0256	///   A_MG_MMV: 0255 [0256]: (  598:  598)            
@256 0008	///     MG_MMV: 0256 [0008]: (    8:    8)            	// MG_MMV length
@257 006d	///             0257 [006d]: (  109:  'm')            
@258 0079	///             0258 [0079]: (  121:  'y')            
@259 0020	///             0259 [0020]: (   32:  ' ')            	// ' '
@25a 006d	///             025a [006d]: (  109:  'm')            
@25b 006f	///             025b [006f]: (  111:  'o')            
@25c 0076	///             025c [0076]: (  118:  'v')            
@25d 0065	///             025d [0065]: (  101:  'e')            
@25e 0021	///             025e [0021]: (   33:  '!')            
@25f 0260	///   A_MG_GMO: 025f [0260]: (  608:  608)            
@260 000a	///     MG_GMO: 0260 [000a]: (   10:   10)            	// MG_GMO length
@261 0067	///             0261 [0067]: (  103:  'g')            
@262 0061	///             0262 [0061]: (   97:  'a')            
@263 006d	///             0263 [006d]: (  109:  'm')            
@264 0065	///             0264 [0065]: (  101:  'e')            
@265 0020	///             0265 [0020]: (   32:  ' ')            	// ' '
@266 006f	///             0266 [006f]: (  111:  'o')            
@267 0076	///             0267 [0076]: (  118:  'v')            
@268 0065	///             0268 [0065]: (  101:  'e')            
@269 0072	///             0269 [0072]: (  114:  'r')            
@26a 0021	///             026a [0021]: (   33:  '!')            
@26b 026c	///   A_MG_YWN: 026b [026c]: (  620:  620)            
@26c 0008	///     MG_YWN: 026c [0008]: (    8:    8)            	// MG_YWN length
@26d 0079	///             026d [0079]: (  121:  'y')            
@26e 006f	///             026e [006f]: (  111:  'o')            
@26f 0075	///             026f [0075]: (  117:  'u')            
@270 0020	///             0270 [0020]: (   32:  ' ')            	// ' '
@271 0077	///             0271 [0077]: (  119:  'w')            
@272 0069	///             0272 [0069]: (  105:  'i')            
@273 006e	///             0273 [006e]: (  110:  'n')            
@274 0021	///             0274 [0021]: (   33:  '!')            
@275 0276	///   A_MG_IWN: 0275 [0276]: (  630:  630)            
@276 0006	///     MG_IWN: 0276 [0006]: (    6:    6)            	// MG_IWN length
@277 0049	///             0277 [0049]: (   73:  'I')            
@278 0020	///             0278 [0020]: (   32:  ' ')            	// ' '
@279 0077	///             0279 [0077]: (  119:  'w')            
@27a 0069	///             027a [0069]: (  105:  'i')            
@27b 006e	///             027b [006e]: (  110:  'n')            
@27c 0021	///             027c [0021]: (   33:  '!')            
@27d 027e	///   A_MG_TIE: 027d [027e]: (  638:  638)            
@27e 000d	///     MG_TIE: 027e [000d]: (   13:   13)            	// MG_TIE length
@27f 0069	///             027f [0069]: (  105:  'i')            
@280 0074	///             0280 [0074]: (  116:  't')            
@281 0027	///             0281 [0027]: (   39:  ''')            
@282 0073	///             0282 [0073]: (  115:  's')            
@283 0020	///             0283 [0020]: (   32:  ' ')            	// ' '
@284 0061	///             0284 [0061]: (   97:  'a')            
@285 0020	///             0285 [0020]: (   32:  ' ')            	// ' '
@286 0074	///             0286 [0074]: (  116:  't')            
@287 0069	///             0287 [0069]: (  105:  'i')            
@288 0065	///             0288 [0065]: (  101:  'e')            
@289 002e	///             0289 [002e]: (   46:  '.')            
@28a 002e	///             028a [002e]: (   46:  '.')            
@28b 002e	///             028b [002e]: (   46:  '.')            
@28c 000d	///    MG_IVMV: 028c [000d]: (   13:   13)            	// MG_IVMV length
@28d 0069	///             028d [0069]: (  105:  'i')            
@28e 006e	///             028e [006e]: (  110:  'n')            
@28f 0076	///             028f [0076]: (  118:  'v')            
@290 0061	///             0290 [0061]: (   97:  'a')            
@291 006c	///             0291 [006c]: (  108:  'l')            
@292 0069	///             0292 [0069]: (  105:  'i')            
@293 0064	///             0293 [0064]: (  100:  'd')            
@294 0020	///             0294 [0020]: (   32:  ' ')            	// ' '
@295 006d	///             0295 [006d]: (  109:  'm')            
@296 006f	///             0296 [006f]: (  111:  'o')            
@297 0076	///             0297 [0076]: (  118:  'v')            
@298 0065	///             0298 [0065]: (  101:  'e')            
@299 0021	///             0299 [0021]: (   33:  '!')            
@29a 0022	///     MG_WHG: 029a [0022]: (   34:  '"')            	// MG_WHG length
@29b 000a	///             029b [000a]: (   10:   10)            	// '\n'
@29c 0077	///             029c [0077]: (  119:  'w')            
@29d 0068	///             029d [0068]: (  104:  'h')            
@29e 006f	///             029e [006f]: (  111:  'o')            
@29f 0020	///             029f [0020]: (   32:  ' ')            	// ' '
@2a0 0067	///             02a0 [0067]: (  103:  'g')            
@2a1 006f	///             02a1 [006f]: (  111:  'o')            
@2a2 0065	///             02a2 [0065]: (  101:  'e')            
@2a3 0073	///             02a3 [0073]: (  115:  's')            
@2a4 0020	///             02a4 [0020]: (   32:  ' ')            	// ' '
@2a5 0066	///             02a5 [0066]: (  102:  'f')            
@2a6 0069	///             02a6 [0069]: (  105:  'i')            
@2a7 0072	///             02a7 [0072]: (  114:  'r')            
@2a8 0073	///             02a8 [0073]: (  115:  's')            
@2a9 0074	///             02a9 [0074]: (  116:  't')            
@2aa 003f	///             02aa [003f]: (   63:  '?')            
@2ab 0020	///             02ab [0020]: (   32:  ' ')            	// ' '
@2ac 0028	///             02ac [0028]: (   40:  '(')            
@2ad 0030	///             02ad [0030]: (   48:  '0')            
@2ae 003a	///             02ae [003a]: (   58:  ':')            
@2af 0059	///             02af [0059]: (   89:  'Y')            
@2b0 004f	///             02b0 [004f]: (   79:  'O')            
@2b1 0055	///             02b1 [0055]: (   85:  'U')            
@2b2 002c	///             02b2 [002c]: (   44:  ',')            
@2b3 0020	///             02b3 [0020]: (   32:  ' ')            	// ' '
@2b4 0031	///             02b4 [0031]: (   49:  '1')            
@2b5 003a	///             02b5 [003a]: (   58:  ':')            
@2b6 004d	///             02b6 [004d]: (   77:  'M')            
@2b7 0045	///             02b7 [0045]: (   69:  'E')            
@2b8 002c	///             02b8 [002c]: (   44:  ',')            
@2b9 0020	///             02b9 [0020]: (   32:  ' ')            	// ' '
@2ba 0071	///             02ba [0071]: (  113:  'q')            
@2bb 0029	///             02bb [0029]: (   41:  ')')            
@2bc 003a	///             02bc [003a]: (   58:  ':')            
@2bd 0004	///    MG_SEPR: 02bd [0004]: (    4:    4)            	// MG_SEPR length
@2be 002d	///             02be [002d]: (   45:  '-')            
@2bf 002d	///             02bf [002d]: (   45:  '-')            
@2c0 002d	///             02c0 [002d]: (   45:  '-')            
@2c1 000a	///             02c1 [000a]: (   10:   10)            	// '\n'
@2c2 02c3	///   A_MG_BRD: 02c2 [02c3]: (  707:  707)            
@2c3 000c	///     MG_BRD: 02c3 [000c]: (   12:   12)            	// MG_BRD length
@2c4 002d	///             02c4 [002d]: (   45:  '-')            
@2c5 002d	///             02c5 [002d]: (   45:  '-')            
@2c6 002d	///             02c6 [002d]: (   45:  '-')            
@2c7 000a	///             02c7 [000a]: (   10:   10)            	// '\n'
@2c8 002d	///             02c8 [002d]: (   45:  '-')            
@2c9 002d	///             02c9 [002d]: (   45:  '-')            
@2ca 002d	///             02ca [002d]: (   45:  '-')            
@2cb 000a	///             02cb [000a]: (   10:   10)            	// '\n'
@2cc 002d	///             02cc [002d]: (   45:  '-')            
@2cd 002d	///             02cd [002d]: (   45:  '-')            
@2ce 002d	///             02ce [002d]: (   45:  '-')            
@2cf 000a	///             02cf [000a]: (   10:   10)            	// '\n'
@2d0 0000	///       P_CW: 02d0 [0000]: (    0:    0)            	// CW pointer
@2d1 02d2	///       A_CW: 02d1 [02d2]: (  722:  722)            
// array for CHK_3 parameter
@2d2 0001	///         CW: 02d2 [0001]: (    1:    1)            	// offset = 1 (0,1,2)
@2d3 0000	///             02d3 [0000]: (    0:    0)            	// pos    = 0 (0,1,2)
@2d4 0001	///             02d4 [0001]: (    1:    1)            	// offset = 1 (3,4,5)
@2d5 0003	///             02d5 [0003]: (    3:    3)            	// pos    = 3 (3,4,5)
@2d6 0001	///             02d6 [0001]: (    1:    1)            	// offset = 1 (6,7,8)
@2d7 0006	///             02d7 [0006]: (    6:    6)            	// pos    = 6 (6,7,8)
@2d8 0003	///             02d8 [0003]: (    3:    3)            	// offset = 3 (0,3,6)
@2d9 0000	///             02d9 [0000]: (    0:    0)            	// pos    = 0 (0,3,6)
@2da 0003	///             02da [0003]: (    3:    3)            	// offset = 3 (1,4,7)
@2db 0001	///             02db [0001]: (    1:    1)            	// pos    = 1 (1,4,7)
@2dc 0003	///             02dc [0003]: (    3:    3)            	// offset = 3 (2,5,8)
@2dd 0002	///             02dd [0002]: (    2:    2)            	// pos    = 2 (2,5,8)
@2de 0004	///             02de [0004]: (    4:    4)            	// offset = 4 (0,4,8)
@2df 0000	///             02df [0000]: (    0:    0)            	// pos    = 0 (0,4,8)
@2e0 0002	///             02e0 [0002]: (    2:    2)            	// offset = 2 (2,4,6)
@2e1 0002	///             02e1 [0002]: (    2:    2)            	// pos    = 2 (2,4,6)
@2e2 0000	///      P_HVD: 02e2 [0000]: (    0:    0)            	// HVD pointer
@2e3 02e4	///      A_HVD: 02e3 [02e4]: (  740:  740)            
@2e4 02ec	///       A_H1: 02e4 [02ec]: (  748:  748)            
@2e5 02f5	///       A_H2: 02e5 [02f5]: (  757:  757)            
@2e6 02fe	///       A_V1: 02e6 [02fe]: (  766:  766)            
@2e7 0307	///       A_V2: 02e7 [0307]: (  775:  775)            
@2e8 0310	///       A_D1: 02e8 [0310]: (  784:  784)            
@2e9 0319	///       A_D2: 02e9 [0319]: (  793:  793)            
@2ea 0322	///       A_D3: 02ea [0322]: (  802:  802)            
@2eb 0327	///       A_D4: 02eb [0327]: (  807:  807)            
@2ec 0001	///         H1: 02ec [0001]: (    1:    1)            	// ( H1[0] = 1)
@2ed 0002	///             02ed [0002]: (    2:    2)            	// ( H1[1] = 2)
@2ee 0000	///             02ee [0000]: (    0:    0)            	// ( H1[2] = 0)
@2ef 0004	///             02ef [0004]: (    4:    4)            	// ( H1[3] = 4)
@2f0 0005	///             02f0 [0005]: (    5:    5)            	// ( H1[4] = 5)
@2f1 0003	///             02f1 [0003]: (    3:    3)            	// ( H1[5] = 3)
@2f2 0007	///             02f2 [0007]: (    7:    7)            	// ( H1[6] = 7)
@2f3 0008	///             02f3 [0008]: (    8:    8)            	// ( H1[7] = 8)
@2f4 0006	///             02f4 [0006]: (    6:    6)            	// ( H1[8] = 6)
@2f5 0002	///         H2: 02f5 [0002]: (    2:    2)            	// ( H2[0] = 2)
@2f6 0000	///             02f6 [0000]: (    0:    0)            	// ( H2[1] = 0)
@2f7 0001	///             02f7 [0001]: (    1:    1)            	// ( H2[2] = 1)
@2f8 0005	///             02f8 [0005]: (    5:    5)            	// ( H2[3] = 5)
@2f9 0003	///             02f9 [0003]: (    3:    3)            	// ( H2[4] = 3)
@2fa 0004	///             02fa [0004]: (    4:    4)            	// ( H2[5] = 4)
@2fb 0008	///             02fb [0008]: (    8:    8)            	// ( H2[6] = 8)
@2fc 0006	///             02fc [0006]: (    6:    6)            	// ( H2[7] = 6)
@2fd 0007	///             02fd [0007]: (    7:    7)            	// ( H2[8] = 7)
@2fe 0003	///         V1: 02fe [0003]: (    3:    3)            	// ( V1[0] = 3)
@2ff 0004	///             02ff [0004]: (    4:    4)            	// ( V1[1] = 4)
@300 0005	///             0300 [0005]: (    5:    5)            	// ( V1[2] = 5)
@301 0006	///             0301 [0006]: (    6:    6)            	// ( V1[3] = 6)
@302 0007	///             0302 [0007]: (    7:    7)            	// ( V1[4] = 7)
@303 0008	///             0303 [0008]: (    8:    8)            	// ( V1[5] = 8)
@304 0000	///             0304 [0000]: (    0:    0)            	// ( V1[6] = 0)
@305 0001	///             0305 [0001]: (    1:    1)            	// ( V1[7] = 1)
@306 0002	///             0306 [0002]: (    2:    2)            	// ( V1[8] = 2)
@307 0006	///         V2: 0307 [0006]: (    6:    6)            	// ( V2[0] = 6)
@308 0007	///             0308 [0007]: (    7:    7)            	// ( V2[1] = 7)
@309 0008	///             0309 [0008]: (    8:    8)            	// ( V2[2] = 8)
@30a 0000	///             030a [0000]: (    0:    0)            	// ( V2[3] = 0)
@30b 0001	///             030b [0001]: (    1:    1)            	// ( V2[4] = 1)
@30c 0002	///             030c [0002]: (    2:    2)            	// ( V2[5] = 2)
@30d 0003	///             030d [0003]: (    3:    3)            	// ( V2[6] = 3)
@30e 0004	///             030e [0004]: (    4:    4)            	// ( V2[7] = 4)
@30f 0005	///             030f [0005]: (    5:    5)            	// ( V2[8] = 5)
@310 0004	///         D1: 0310 [0004]: (    4:    4)            	// ( D1[0] =  4)
@311 ffff	///             0311 [ffff]: (   -1:65535)            	// ( D1[1] = -1)
@312 0004	///             0312 [0004]: (    4:    4)            	// ( D1[2] =  4)
@313 ffff	///             0313 [ffff]: (   -1:65535)            	// ( D1[3] = -1)
@314 0000	///             0314 [0000]: (    0:    0)            	// ( D1[4] =  0)
@315 ffff	///             0315 [ffff]: (   -1:65535)            	// ( D1[5] = -1)
@316 0004	///             0316 [0004]: (    4:    4)            	// ( D1[6] =  4)
@317 ffff	///             0317 [ffff]: (   -1:65535)            	// ( D1[7] = -1)
@318 0004	///             0318 [0004]: (    4:    4)            	// ( D1[8] =  4)
@319 0008	///         D2: 0319 [0008]: (    8:    8)            	// ( D2[0] =  8)
@31a ffff	///             031a [ffff]: (   -1:65535)            	// ( D2[1] = -1)
@31b 0006	///             031b [0006]: (    6:    6)            	// ( D2[2] =  6)
@31c ffff	///             031c [ffff]: (   -1:65535)            	// ( D2[3] = -1)
@31d 0008	///             031d [0008]: (    8:    8)            	// ( D2[4] =  8)
@31e ffff	///             031e [ffff]: (   -1:65535)            	// ( D2[5] = -1)
@31f 0002	///             031f [0002]: (    2:    2)            	// ( D2[6] =  2)
@320 ffff	///             0320 [ffff]: (   -1:65535)            	// ( D2[7] = -1)
@321 0000	///             0321 [0000]: (    0:    0)            	// ( D2[8] =  0)
@322 ffff	///         D3: 0322 [ffff]: (   -1:65535)            	// ( D3[0] = -1)
@323 ffff	///             0323 [ffff]: (   -1:65535)            	// ( D3[1] = -1)
@324 ffff	///             0324 [ffff]: (   -1:65535)            	// ( D3[2] = -1)
@325 ffff	///             0325 [ffff]: (   -1:65535)            	// ( D3[3] = -1)
@326 0002	///             0326 [0002]: (    2:    2)            	// ( D3[4] =  2)
@327 ffff	///         D4: 0327 [ffff]: (   -1:65535)            	// ( D3[5] = -1)
@328 ffff	///             0328 [ffff]: (   -1:65535)            	// ( D3[6] = -1)
@329 ffff	///             0329 [ffff]: (   -1:65535)            	// ( D3[7] = -1)
@32a ffff	///             032a [ffff]: (   -1:65535)            	// ( D3[8] = -1)
@32b 0006	///             032b [0006]: (    6:    6)            	// ( D4[4] =  6)
