/// Verilog Memory Initialization File (.mem) generated by ./ex3_asm

/// 12-bit address
/// 16-bit data

// interrupt entry point
@000 0000	///  ST0: 0000 [0000]: (    0:    0)      	// interrupt return address
@001 402c	///       0001 [402c]: BUN 02c   (I_HND)	// goto I_HND (interrupt handler)
// program entry point
// initialize data
@010 7800	///  INI: 0010 [7800]: CLA              	// AC <- 0
@011 3066	///       0011 [3066]: STA 066   (  STT)	// M[STT] <- 0
@012 3067	///       0012 [3067]: STA 067   (  SFG)	// M[SFG] <- 0
@013 3068	///       0013 [3068]: STA 068   (  PFG)	// M[PFG] <- 0
// IMSK[3:0] : { S_IN, S_OUT, P_IN, P_OUT }
@014 206c	///       0014 [206c]: LDA 06c   (  VHA)	// AC <- M[VHA] (1010)
@015 3069	///       0015 [3069]: STA 069   (  MSK)	// M[MSK] <- (1010)
@016 f008	///       0016 [f008]: IMK              	// IMSK   <- (1010) (S_IN, P_IN enabled)
@017 f080	///       0017 [f080]: ION              	// enable interrupt
@018 2066	///   L0: 0018 [2066]: LDA 066   (  STT)	// AC <- M[STT]
@019 7008	///       0019 [7008]: SNA              	// (M[STT] < 0) ? skip next
@01a 4018	///       001a [4018]: BUN 018   (   L0)
@01b 7001	///       001b [7001]: HLT              
//////////// subroutine (update IMSK) ////////
@01c 0000	///  UMK: 001c [0000]: (    0:    0)      
// arg0 (AC) : unchanged bit mask
// arg1 : added mask bit
@01d 0069	///       001d [0069]: AND 069   (  MSK)	// AC <- arg0 & M[MSK]
@01e 901c	///       001e [901c]: ADD 01c I (  UMK)	// AC <- AC + M[M[UMK]]
@01f 3069	///       001f [3069]: STA 069   (  MSK)	// M[MSK] <- AC
@020 f008	///       0020 [f008]: IMK              	// IMSK <- AC[3:0]
@021 601c	///       0021 [601c]: ISZ 01c   (  UMK)	// ++M[UMK]
@022 c01c	///       0022 [c01c]: BUN 01c I (  UMK)	// return from UMK
//////////// subroutine (check end-character) ////////
@023 0000	///  CEC: 0023 [0000]: (    0:    0)      
// arg0 (AC) : output character
// end-character = 0x4 (ctrl-D)
@024 106e	///       0024 [106e]: ADD 06e   (  VM4)	// AC <- AC - 4
@025 7004	///       0025 [7004]: SZA              	// (AC == 0) ? skip next
@026 c023	///       0026 [c023]: BUN 023 I (  CEC)	// return from CEC
// output character matches (ctrl-D)
@027 206d	///       0027 [206d]: LDA 06d   (  VM1)	// AC <- -1
@028 3066	///       0028 [3066]: STA 066   (  STT)	// M[STT] <- -1
@029 7800	///       0029 [7800]: CLA              	// AC <- 0
@02a f008	///       002a [f008]: IMK              	// IMASK <- 0 (all interrupts disabled)
@02b c023	///       002b [c023]: BUN 023 I (  CEC)	// return from CEC
//////////// interrupt handler /////////
// 1. store AC & E to memory
@02c 3062	///I_HND: 002c [3062]: STA 062   (   BA)	// M[BA] <- AC	(store AC)
@02d 7040	///       002d [7040]: CIL              	// AC[0] <- E	(AC[15:1] is not important here...)
@02e 3063	///       002e [3063]: STA 063   (   BE)	// M[BE] <- AC	(store E)
// 2. check SFG and S_IN
//_B_,
@02f 2067	///  SIN: 002f [2067]: LDA 067   (  SFG)	// AC <- M[SFG]
@030 7004	///       0030 [7004]: SZA              	// (M[SFG] == 0) ? skip next
@031 403b	///       0031 [403b]: BUN 03b   (  POU)	// goto POU
@032 f020	///       0032 [f020]: SIO              	// IOT <- 1 (serial-IO selected)
@033 f200	///       0033 [f200]: SKI              	// (UART_RX ready) ? skip next
@034 4046	///       0034 [4046]: BUN 046   (  PIN)	// goto PIN
// S_IN is ready --> update IMSK (disable S_IN, enable P_OUT)
@035 206a	///       0035 [206a]: LDA 06a   (  VH6)	// AC <- (0110) (S_OUT, P_IN : unchanged)
@036 501c	///       0036 [501c]: BSA 01c   (  UMK)	// call UMK (update IMSK)
@037 0001	///       0037 [0001]: (    1:    1)      	// (0001) (P_OUT : enabled)
// read S_IN data
@038 f800	///       0038 [f800]: INP              	// AC(7:0) <- INPR
@039 3064	///       0039 [3064]: STA 064   (  SDT)	// M[SDT] <- AC
@03a 6067	///       003a [6067]: ISZ 067   (  SFG)	// ++M[SFG]
// 3. check P_OUT
// M[SFG] != 0
@03b f010	///  POU: 003b [f010]: PIO              	// IOT <- 0 (parallel-IO selected)
@03c f100	///       003c [f100]: SKO              	// (P_OUT ready) ? skip next
@03d 4046	///       003d [4046]: BUN 046   (  PIN)	// goto PIN
// P_OUT is ready --> update IMSK (disable P_OUT, enable S_IN)
@03e 206a	///       003e [206a]: LDA 06a   (  VH6)	// AC <- (0110) (S_OUT, P_IN : unchanged)
@03f 501c	///       003f [501c]: BSA 01c   (  UMK)	// call UMK (update IMSK)
@040 0008	///       0040 [0008]: (    8:    8)      	// (1000) (S_IN : enabled)
// output to P_OUT
@041 2064	///       0041 [2064]: LDA 064   (  SDT)	// AC <- M[SDT]
@042 f400	///       0042 [f400]: OUT              	// OUTR <- AC
@043 5023	///       0043 [5023]: BSA 023   (  CEC)	// call CEC (check end-character)
@044 7800	///       0044 [7800]: CLA              	// AC <- 0
@045 3067	///       0045 [3067]: STA 067   (  SFG)	// M[SFG] <- 0
// 4. check PFG and P_IN
@046 2068	///  PIN: 0046 [2068]: LDA 068   (  PFG)	// AC <- M[PFG]
@047 7004	///       0047 [7004]: SZA              	// (M[PFG] == 0) ? skip next
@048 4052	///       0048 [4052]: BUN 052   (  SOU)	// goto SOU
@049 f010	///       0049 [f010]: PIO              	// IOT <- 0 (parallel-IO selected)
@04a f200	///       004a [f200]: SKI              	// (GP_IN ready) ? skip next
@04b 405d	///       004b [405d]: BUN 05d   (  IRT)	// goto IRT
// P_IN is ready --> update IMSK (disable P_IN, enable S_OUT)
@04c 206b	///       004c [206b]: LDA 06b   (  VH9)	// AC <- (1001) (S_IN, P_OUT : unchanged)
@04d 501c	///       004d [501c]: BSA 01c   (  UMK)	// call UMK (update IMSK)
@04e 0004	///       004e [0004]: (    4:    4)      	// (0100) (S_OUT : enabled)
// read P_IN data
@04f f800	///       004f [f800]: INP              	// AC(7:0) <- INPR
@050 3065	///       0050 [3065]: STA 065   (  PDT)	// M[PDT] <- AC
@051 6068	///       0051 [6068]: ISZ 068   (  PFG)	// ++M[PFG]
// 5. check S_OUT
// M[PFG] != 0
@052 f020	///  SOU: 0052 [f020]: SIO              	// IOT <- 1 (serial-IO selected)
@053 f100	///       0053 [f100]: SKO              	// (S_OUT ready) ? skip next
@054 405d	///       0054 [405d]: BUN 05d   (  IRT)	// goto IRT
// S_OUT is ready --> update IMSK (disable S_OUT, enable P_IN)
@055 206b	///       0055 [206b]: LDA 06b   (  VH9)	// AC <- (1001) (S_IN, P_OUT : unchanged)
@056 501c	///       0056 [501c]: BSA 01c   (  UMK)	// call UMK (update IMSK)
@057 0002	///       0057 [0002]: (    2:    2)      	// (0010) (P_IN : enabled)
// output to S_OUT
@058 2065	///       0058 [2065]: LDA 065   (  PDT)	// AC <- M[PDT]
@059 f400	///       0059 [f400]: OUT              	// OUTR <- AC
@05a 5023	///       005a [5023]: BSA 023   (  CEC)	// call CEC (check end-character)
@05b 7800	///       005b [7800]: CLA              	// AC <- 0
@05c 3068	///       005c [3068]: STA 068   (  PFG)	// M[PFG] <- 0
// 6. restore AC & E from memory
@05d 2063	///  IRT: 005d [2063]: LDA 063   (   BE)	// AC <- M[BE]
@05e 7080	///       005e [7080]: CIR              	// E <- AC[0]	(restore E)
@05f 2062	///       005f [2062]: LDA 062   (   BA)	// AC <- M[BA]	(restore AC)
@060 f080	///       0060 [f080]: ION              	// IEN <- 1		(enable interrupt)
@061 c000	///       0061 [c000]: BUN 000 I (  ST0)	// indirect return (return address stored in ST0)
// data (no initialization)
@062 0000	///   BA: 0062 [0000]: (    0:    0)      	// backup storage for AC during interrupt handling
@063 0000	///   BE: 0063 [0000]: (    0:    0)      	// backup storage for  E during interrupt handling
@064 0000	///  SDT: 0064 [0000]: (    0:    0)      	// S_IN data
@065 0000	///  PDT: 0065 [0000]: (    0:    0)      	// P_IN data
// data (need initialization code)
@066 0000	///  STT: 0066 [0000]: (    0:    0)      	// state
@067 0000	///  SFG: 0067 [0000]: (    0:    0)      	// S_IN flag
@068 0000	///  PFG: 0068 [0000]: (    0:    0)      	// P_IN flag
@069 0000	///  MSK: 0069 [0000]: (    0:    0)      	// IMSK data
// data (read-only)
@06a 0006	///  VH6: 006a [0006]: (    6:    6)      	// VH6 = 0x6 (0110)
@06b 0009	///  VH9: 006b [0009]: (    9:    9)      	// VH9 = 0x9 (1001)
@06c 000a	///  VHA: 006c [000a]: (   10:   10)      	// VHA = 0xA (1010)
@06d ffff	///  VM1: 006d [ffff]: (   -1:65535)      	// VM1 = -1
@06e fffc	///  VM4: 006e [fffc]: (   -4:65532)      	// VM4 = -4
