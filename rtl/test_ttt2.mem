/// Verilog Memory Initialization File (.mem) generated by ./ex3_asm

/// 12-bit address
/// 16-bit data

// interrupt entry point
@000 0000	///        ST0: 0000 [0000]: (    0:    0)            	// interrupt return address
@001 4025	///             0001 [4025]: BUN 025   (      I_HND)	// goto I_HND (interrupt handler)
// program entry point
// initialize data
@010 7800	///        INI: 0010 [7800]: CLA                    	// AC         <- 0
@011 31ef	///             0011 [31ef]: STA 1ef   (        BYE)	// M[BYE]     <- 0
@012 31f0	///             0012 [31f0]: STA 1f0   (    NXT_BYE)	// M[NXT_BYE] <- 0
@013 31f1	///             0013 [31f1]: STA 1f1   (        STT)	// M[STT]     <- 0
@014 31f2	///             0014 [31f2]: STA 1f2   (    NXT_STT)	// M[NXT_STT] <- 0
@015 2214	///             0015 [2214]: LDA 214   (        VH1)	// AC         <- 1
@016 31f4	///             0016 [31f4]: STA 1f4   (    NXT_INP)	// M[NXT_INP] <- 1 (change to input state after output process)
@017 31f3	///             0017 [31f3]: STA 1f3   (    OUT_STT)	// M[OUT_STT] <- 1 (output state)
// set start message
@018 2215	///             0018 [2215]: LDA 215   (        VH2)	// AC <- 2
@019 519c	///             0019 [519c]: BSA 19c   (     SET_ML)	// call SET_ML (set message list)
@01a 0227	///             001a [0227]: (  551:  551)            
@01b 029e	///             001b [029e]: (  670:  670)            
// setup IO registers
@01c 220f	///             001c [220f]: LDA 20f   (        EOM)	// AC <- M[EOM] (initial value = 1)
@01d f020	///             001d [f020]: IMK                    	// IMASK <- AC[1:0] (input disabled, output enabled)
@01e 2216	///             001e [2216]: LDA 216   (        VH3)	// AC <- 3
@01f f010	///             001f [f010]: IOS                    	// IOSEL <- 3 (uart input, uart output)
@020 f080	///             0020 [f080]: ION                    	// enable interrupt
// wait until (M[BYE] = 1)
@021 21ef	///         L0: 0021 [21ef]: LDA 1ef   (        BYE)	// AC <- M[BYE]
@022 7004	///             0022 [7004]: SZA                    	// (M[BYE] == 0) ? skip next
@023 7001	///             0023 [7001]: HLT                    
@024 4021	///             0024 [4021]: BUN 021   (         L0)	// goto L0
//////////// interrupt handler ///////////
// store AC & E to memory
@025 31de	///      I_HND: 0025 [31de]: STA 1de   (         BA)	// M[BA] <- AC	(store AC)
@026 7040	///             0026 [7040]: CIL                    	// AC[0] <- E	(AC[15:1] is not important here...)
@027 31df	///             0027 [31df]: STA 1df   (         BE)	// M[BE] <- AC	(store E)
//////////// state machine ///////////
// M[OUT_PD] = 0 (process input), 1 (process output)
// check state :
@028 21f3	///             0028 [21f3]: LDA 1f3   (    OUT_STT)	// AC <- M[OUT_STT]
@029 7004	///             0029 [7004]: SZA                    	// (M[OUT_STT] == 0) skip next
@02a 41bd	///             002a [41bd]: BUN 1bd   (    PUT_OUT)	// goto PUT_OUT (process output)
//////////// process input ///////////
// M[OUT_STT] = 0 : input mode (M[TMI] <- INPR)
@02b f200	///             002b [f200]: SKI                    	// (FGI = 0) ? skip next
@02c 4043	///             002c [4043]: BUN 043   (        IRT)	// goto IRT (return from interrupt handler) --> this should not happen...
@02d 7800	///             002d [7800]: CLA                    	// AC      <- 0
@02e f800	///             002e [f800]: INP                    	// AC[7:0] <- INPR
@02f 31dd	///             002f [31dd]: STA 1dd   (        TMI)	// M[TMI]  <- INPR
//////////// state switch : M[STT] = 0, 1, 2, 3, 4, 5, 6 ///////////
@030 21f1	///     STT_SW: 0030 [21f1]: LDA 1f1   (        STT)	// AC <- M[STT]
@031 1219	///             0031 [1219]: ADD 219   (        VM1)	// AC <- M[STT] - 1
@032 7010	///             0032 [7010]: SPA                    	// (M[STT] >= 1) ? skip next
@033 4058	///             0033 [4058]: BUN 058   (      STT_0)	// goto STT_0 (M[STT] = 0: setup new game) --> M[NXT_STT] = 1 (get your move), 2 (put my move)
@034 1219	///             0034 [1219]: ADD 219   (        VM1)	// AC <- M[STT] - 1 - 1
@035 7010	///             0035 [7010]: SPA                    	// (M[STT] >= 2) ? skip next
@036 4071	///             0036 [4071]: BUN 071   (      STT_1)	// goto STT_1 (M[STT] = 1: get your move)  --> M[NXT_STT] = 2 (put my move), 4 (end game)
@037 1219	///             0037 [1219]: ADD 219   (        VM1)	// AC <- M[STT] - 2 - 1
@038 7010	///             0038 [7010]: SPA                    	// (M[STT] >= 3) ? skip next
@039 408b	///             0039 [408b]: BUN 08b   (      STT_2)	// goto STT_2 (M[STT] = 2: put my move)    --> M[NXT_STT] = 3 (show my move)
@03a 1219	///             003a [1219]: ADD 219   (        VM1)	// AC <- M[STT] - 3 - 1
@03b 7010	///             003b [7010]: SPA                    	// (M[STT] >= 4) ? skip next
@03c 409a	///             003c [409a]: BUN 09a   (      STT_3)	// goto STT_3 (M[STT] = 3: show my move)   --> M[NXT_STT] = 1 (get your move), 4 (end game)
@03d 409c	///             003d [409c]: BUN 09c   (      STT_4)	// goto STT_4 (M[STT] = 4: end game)       --> M[NXT_STT] = 0 (setup new game)
//////////// end tic-tac-toe ///////////
@03e 2214	///    END_TTT: 003e [2214]: LDA 214   (        VH1)	// AC         <- 1
@03f 519c	///             003f [519c]: BSA 19c   (     SET_ML)	// call SET_ML (set message list)
@040 0244	///             0040 [0244]: (  580:  580)            
@041 31f0	///             0041 [31f0]: STA 1f0   (    NXT_BYE)	// M[NXT_BYE] <- 1
@042 4048	///             0042 [4048]: BUN 048   (    PRP_OUT)	// goto PRP_OUT (prepare output)
//////////// return from interrupt handler ///////////
@043 21df	///        IRT: 0043 [21df]: LDA 1df   (         BE)	// AC  <- M[BE]
@044 7080	///             0044 [7080]: CIR                    	// E   <- AC[0]	(restore E)
@045 21de	///             0045 [21de]: LDA 1de   (         BA)	// AC  <- M[BA]	(restore AC)
@046 f080	///             0046 [f080]: ION                    	// IEN <- 1		(enable interrupt)
@047 c000	///             0047 [c000]: BUN 000 I (        ST0)	// return from ST0 (interrupt handler)
//////////// prepare output ///////////
@048 2214	///    PRP_OUT: 0048 [2214]: LDA 214   (        VH1)	// AC         <- 1
@049 31f3	///             0049 [31f3]: STA 1f3   (    OUT_STT)	// M[OUT_STT] <- 1 (output state)
@04a 220f	///             004a [220f]: LDA 20f   (        EOM)	// AC         <- M[EOM] (initial value = 1)
@04b f020	///             004b [f020]: IMK                    	// IMASK      <- AC[1:0] (input disabled, output enabled)
@04c 4043	///             004c [4043]: BUN 043   (        IRT)	// goto IRT (return from interrupt handler)
@04d 0000	///   PRP_TURN: 004d [0000]: (    0:    0)            	// return address
//////////// subroutine (prepare next turn)  ///////////
@04e 2203	///             004e [2203]: LDA 203   (       TURN)	// AC         <- M[TURN]
@04f 7004	///             004f [7004]: SZA                    	// (AC = 0) ? skip next
@050 4055	///             0050 [4055]: BUN 055   (     PRP_MT)	// goto PRP_MT (prepare my turn)
// prepare "your turn"
@051 2214	///             0051 [2214]: LDA 214   (        VH1)	// AC         <- 1
@052 31f2	///             0052 [31f2]: STA 1f2   (    NXT_STT)	// M[NXT_STT] <- 1 (next state : get your move)
@053 31f4	///             0053 [31f4]: STA 1f4   (    NXT_INP)	// M[INP]     <- 1 (change to input state after output process)
@054 c04d	///             0054 [c04d]: BUN 04d I (   PRP_TURN)	// return from PRP_TURN
// prepare "my turn"
@055 2215	///     PRP_MT: 0055 [2215]: LDA 215   (        VH2)	// AC         <- 2
@056 31f2	///             0056 [31f2]: STA 1f2   (    NXT_STT)	// M[NXT_STT] <- 2 (next state : put my move)
@057 c04d	///             0057 [c04d]: BUN 04d I (   PRP_TURN)	// return from PRP_TURN
//////////// M[STT] = 0 : setup new game  ///////////
// determine who gets the opening move 
@058 2220	///      STT_0: 0058 [2220]: LDA 220   (       CH_0)	// AC <- '0'
@059 7200	///             0059 [7200]: CMA                    
@05a 7020	///             005a [7020]: INC                    	// AC <- -'0'
@05b 11dd	///             005b [11dd]: ADD 1dd   (        TMI)	// AC <- M[TMI] - '0'
@05c 3203	///             005c [3203]: STA 203   (       TURN)	// M[TURM] <- M[TMI] - '0'
@05d 7010	///             005d [7010]: SPA                    	// (M[TMI] >= '0') ? skip next
@05e 403e	///             005e [403e]: BUN 03e   (    END_TTT)	// goto END_TTT (end tic-tac-toe : M[TMI] < '0')
@05f 121a	///             005f [121a]: ADD 21a   (        VM2)	// AC <- M[TURM] - 2
@060 7008	///             0060 [7008]: SNA                    	// (M[TURM] < 2) ? skip next
@061 403e	///             0061 [403e]: BUN 03e   (    END_TTT)	// goto END_TTT (end tic-tac-toe : M[TMI] >= '2')
// clear board
@062 221e	///             0062 [221e]: LDA 21e   (        VM9)	// AC       <- -9
@063 31e1	///             0063 [31e1]: STA 1e1   (      CNT_1)	// M[CNT1]  <- -9
@064 2205	///             0064 [2205]: LDA 205   (      A_BRD)	// AC       <- M[A_BRD] (BRD)
@065 31e4	///             0065 [31e4]: STA 1e4   (      P_BRD)	// M[P_BRD] <- BRD
@066 7800	///             0066 [7800]: CLA                    	// AC       <- 0
// loop clear board
@067 b1e4	///  L_CLR_BRD: 0067 [b1e4]: STA 1e4 I (      P_BRD)	// M[M[P_BRD]] <- 0
@068 61e4	///             0068 [61e4]: ISZ 1e4   (      P_BRD)	// ++M[P_BRD]
@069 61e1	///             0069 [61e1]: ISZ 1e1   (      CNT_1)	// ((++M[CNT_1]) == 0) ? skip next
@06a 4067	///             006a [4067]: BUN 067   (  L_CLR_BRD)	// goto L_CLR_BRD (loop clear board)
// initialize move_count, winner
@06b 3204	///             006b [3204]: STA 204   (     WINNER)	// M[WINNER]  <- 0
@06c 221e	///             006c [221e]: LDA 21e   (        VM9)	// AC         <- -9
@06d 3202	///             006d [3202]: STA 202   (    CNT_MOV)	// M[CNT_MOV] <- -9
@06e 504d	///             006e [504d]: BSA 04d   (   PRP_TURN)	// call PRP_TURN (prepare next turn)
@06f 50b5	///             006f [50b5]: BSA 0b5   (  SHOW_GAME)	// call SHOW_GAME
@070 4048	///             0070 [4048]: BUN 048   (    PRP_OUT)	// goto PRP_OUT (prepare output)
//////////// M[STT] = 1 : get your move (must satisfy: '1' <= M[TMI] <= '9')  ///////////
@071 2221	///      STT_1: 0071 [2221]: LDA 221   (       CH_1)	// AC        <- M[CH_1] ('1')
@072 7200	///             0072 [7200]: CMA                    
@073 7020	///             0073 [7020]: INC                    	// AC        <- -'1'
@074 11dd	///             0074 [11dd]: ADD 1dd   (        TMI)	// AC        <- M[TMI] - '1'
@075 7010	///             0075 [7010]: SPA                    	// (M[TMI] >= '1') ? skip next
@076 4085	///             0076 [4085]: BUN 085   (      NG_YM)	// goto NG_YM (your move is invalid : invalid position)
@077 31dd	///             0077 [31dd]: STA 1dd   (        TMI)	// M[TMI]    <- M[TMI] - '1';
@078 121e	///             0078 [121e]: ADD 21e   (        VM9)	// AC        <- M[TMI] - 9
@079 7008	///             0079 [7008]: SNA                    	// (M[TMI] < 9) ? skip next
@07a 4085	///             007a [4085]: BUN 085   (      NG_YM)	// goto NG_YM (your move is invalid : invalid position)
// put your move to board
@07b 2205	///             007b [2205]: LDA 205   (      A_BRD)	// AC        <- M[A_BRD] (BRD)
@07c 11dd	///             007c [11dd]: ADD 1dd   (        TMI)	// AC        <- BRD + M[TMI]
@07d 31e4	///             007d [31e4]: STA 1e4   (      P_BRD)	// M[P_BRD]  <- BRD + M[TMI]
@07e a1e4	///             007e [a1e4]: LDA 1e4 I (      P_BRD)	// AC        <- M[BRD + M[TMI]]
@07f 7004	///             007f [7004]: SZA                    	// (M[BRD + M[TMI]] == 0) ? skip next
@080 4085	///             0080 [4085]: BUN 085   (      NG_YM)	// goto NG_YM (your move is invalid : already occupied...)
@081 2224	///             0081 [2224]: LDA 224   (      YR_MK)	// AC              <- M[YR_MK] ('O')
@082 b1e4	///             0082 [b1e4]: STA 1e4 I (      P_BRD)	// M[BRD + M[TMI]] <- M[YR_MK] ('O')
@083 50e7	///             0083 [50e7]: BSA 0e7   (   UPD_TURN)	// call UPD_TURN (update turn)
@084 4048	///             0084 [4048]: BUN 048   (    PRP_OUT)	// goto PRP_OUT (prepare output)
// your move is invalid
@085 2214	///      NG_YM: 0085 [2214]: LDA 214   (        VH1)	// AC     <- 1
@086 519c	///             0086 [519c]: BSA 19c   (     SET_ML)	// call SET_ML (set message list)
@087 0290	///             0087 [0290]: (  656:  656)            
@088 2214	///             0088 [2214]: LDA 214   (        VH1)	// AC     <- 1
@089 31f4	///             0089 [31f4]: STA 1f4   (    NXT_INP)	// M[INP] <- 1
@08a 4048	///             008a [4048]: BUN 048   (    PRP_OUT)	// goto PRP_OUT (prepare output)
//////////// M[STT] = 2 : put my move  ///////////
@08b 512f	///      STT_2: 008b [512f]: BSA 12f   (     MY_MOV)	// call MY_MOV (next move position stored in M[P_BRD])
// put my move to board
@08c 2223	///             008c [2223]: LDA 223   (      MY_MK)	// AC           <- M[MY_MK] ('X')
@08d b1e4	///             008d [b1e4]: STA 1e4 I (      P_BRD)	// M[BRD + pos] <- M[MY_MK] ('X')
// put my move to output
@08e 2205	///             008e [2205]: LDA 205   (      A_BRD)	// AC           <- M[A_BRD] (BRD)
@08f 7200	///             008f [7200]: CMA                    
@090 7020	///             0090 [7020]: INC                    	// AC           <- - BRD
@091 11e4	///             0091 [11e4]: ADD 1e4   (      P_BRD)	// AC           <- P_BRD - BRD (= pos)
@092 1221	///             0092 [1221]: ADD 221   (       CH_1)	// AC           <- pos + '1'
@093 3240	///             0093 [3240]: STA 240   (  MG_MY_MV0)	// M[MG_MY_MV0]  <- pos + '1'
// set output message
///		BSA SET_MGP		/ call SET_MGP (set message to gpio output)
@094 2214	///             0094 [2214]: LDA 214   (        VH1)	// AC           <- 1
@095 519c	///             0095 [519c]: BSA 19c   (     SET_ML)	// call SET_ML  (set message list)
@096 023f	///             0096 [023f]: (  575:  575)            
@097 2216	///             0097 [2216]: LDA 216   (        VH3)	// AC           <- 3
@098 31f2	///             0098 [31f2]: STA 1f2   (    NXT_STT)	// M[NXT_STT]   <- 3
@099 4048	///             0099 [4048]: BUN 048   (    PRP_OUT)	// goto PRP_OUT (prepare output)
//////////// M[STT] = 3 : show my move  ///////////
@09a 50e7	///      STT_3: 009a [50e7]: BSA 0e7   (   UPD_TURN)	// call UPD_TURN (update turn)
@09b 4048	///             009b [4048]: BUN 048   (    PRP_OUT)	// goto PRP_OUT (prepare output)
//////////// M[STT] = 4 : end game  ///////////
@09c 2204	///      STT_4: 009c [2204]: LDA 204   (     WINNER)	// AC         <- M[WINNER]
@09d 7004	///             009d [7004]: SZA                    	// (M[WINNER] == 0) ? skip next
@09e 40a2	///             009e [40a2]: BUN 0a2   (    WHO_WON)	// BUN WHO_WON (who won??)
@09f 2281	///             009f [2281]: LDA 281   (   A_MG_TIE)	// AC         <- M[A_MG_TIE] (MG_TIE : "it's a tie")
@0a0 30ae	///             00a0 [30ae]: STA 0ae   (     RESULT)	// M[RESULT]  <- "it's a tie"
@0a1 40ac	///             00a1 [40ac]: BUN 0ac   (    STT_4_1)	// goto STT_4_1
@0a2 7200	///    WHO_WON: 00a2 [7200]: CMA                    
@0a3 7020	///             00a3 [7020]: INC                    	// AC         <- - M[WINNER]
@0a4 1224	///             00a4 [1224]: ADD 224   (      YR_MK)	// AC         <- M[YR_MK] - M[WINNER]
@0a5 7004	///             00a5 [7004]: SZA                    	// (M[YR_MK] == M[WINNER]) ? skip next
@0a6 40aa	///             00a6 [40aa]: BUN 0aa   (      I_WON)	// goto I_WON
@0a7 226f	///             00a7 [226f]: LDA 26f   (   A_MG_YWN)	// AC         <- M[A_MG_YWN] (MG_YWN : "you win!")
@0a8 30ae	///             00a8 [30ae]: STA 0ae   (     RESULT)	// M[RESULT]  <- "you win!"
@0a9 40ac	///             00a9 [40ac]: BUN 0ac   (    STT_4_1)	// goto STT_4_1
@0aa 2279	///      I_WON: 00aa [2279]: LDA 279   (   A_MG_IWN)	// AC         <- M[A_MG_IWN] (MG_IWN : "I win!")
@0ab 30ae	///             00ab [30ae]: STA 0ae   (     RESULT)	// M[RESULT]  <- "I win!"
@0ac 2215	///    STT_4_1: 00ac [2215]: LDA 215   (        VH2)	// AC         <- 2
@0ad 519c	///             00ad [519c]: BSA 19c   (     SET_ML)	// call SET_ML (set message list)
@0ae 0000	///     RESULT: 00ae [0000]: (    0:    0)            	// (arg1) "you win!" or "I win!" or "it's a tie..."
@0af 029e	///             00af [029e]: (  670:  670)            
@0b0 2214	///             00b0 [2214]: LDA 214   (        VH1)	// AC         <- 1
@0b1 31f4	///             00b1 [31f4]: STA 1f4   (    NXT_INP)	// M[INP]     <- 1
@0b2 7800	///             00b2 [7800]: CLA                    	// AC         <- 0
@0b3 31f2	///             00b3 [31f2]: STA 1f2   (    NXT_STT)	// M[NXT_STT] <- 0
@0b4 4048	///             00b4 [4048]: BUN 048   (    PRP_OUT)	// goto PRP_OUT (prepare output)
@0b5 0000	///  SHOW_GAME: 00b5 [0000]: (    0:    0)            	// return address
//////////// subroutine (show game)  ///////////
@0b6 2205	///             00b6 [2205]: LDA 205   (      A_BRD)	// AC        <- M[A_BRD] (BRD)
@0b7 31e4	///             00b7 [31e4]: STA 1e4   (      P_BRD)	// M[P_BRD]  <- BRD + 1
@0b8 22c6	///             00b8 [22c6]: LDA 2c6   (   A_MG_BRD)	// AC        <- M[A_MG_BRD] (MG_BRD)
@0b9 7020	///             00b9 [7020]: INC                    	// AC        <- MG_BRD + 1
@0ba 31e0	///             00ba [31e0]: STA 1e0   (     PTR_MG)	// M[PTR_MG] <- MG_BRD + 1
@0bb 221b	///             00bb [221b]: LDA 21b   (        VM3)	// AC        <- -3
@0bc 31e1	///             00bc [31e1]: STA 1e1   (      CNT_1)	// M[CNT_1]  <- -3
@0bd 2221	///             00bd [2221]: LDA 221   (       CH_1)	// AC        <- '1'
@0be 31db	///             00be [31db]: STA 1db   (        TMA)	// M[TMA]    <- '1'
// loop print board
@0bf 50dd	///   L_PUT_BD: 00bf [50dd]: BSA 0dd   (    PRT_BRD)	// call PRT_BRD (print board)
@0c0 50dd	///             00c0 [50dd]: BSA 0dd   (    PRT_BRD)	// call PRT_BRD (print board)
@0c1 50dd	///             00c1 [50dd]: BSA 0dd   (    PRT_BRD)	// call PRT_BRD (print board)
@0c2 61e0	///             00c2 [61e0]: ISZ 1e0   (     PTR_MG)	// ++M[PTR_MG] : skip newline position on BD_MG
@0c3 61e1	///             00c3 [61e1]: ISZ 1e1   (      CNT_1)	// ((++M[CNT_1]) == 0) ? skip next
@0c4 40bf	///             00c4 [40bf]: BUN 0bf   (   L_PUT_BD)	// goto L_PUT_BD (loop print board)
// check winner
@0c5 2204	///             00c5 [2204]: LDA 204   (     WINNER)	// AC <- M[WINNER]
@0c6 7004	///             00c6 [7004]: SZA                    	// (M[WINNER] == 0) ? skip next
@0c7 40d4	///             00c7 [40d4]: BUN 0d4   ( SET_GM_OVR)	// goto SET_GM_OVR (M[WINNER] != 0)
@0c8 2202	///             00c8 [2202]: LDA 202   (    CNT_MOV)	// AC <- M[CNT_MOV]
@0c9 7008	///             00c9 [7008]: SNA                    	// (M[CNT_MOV] < 0) ? skip next
@0ca 40d4	///             00ca [40d4]: BUN 0d4   ( SET_GM_OVR)	// goto SET_GM_OVR (M[CNT_MOV] == 0)
// set NXT_MV ("your move!" or "my move!")
@0cb 2203	///             00cb [2203]: LDA 203   (       TURN)	// AC <- M[TURN]
@0cc 7004	///             00cc [7004]: SZA                    	// (M[TURN] == 0) ? skip next
@0cd 40d1	///             00cd [40d1]: BUN 0d1   (    SET_MMV)	// goto SET_MMV
// set "your move!"
@0ce 224d	///             00ce [224d]: LDA 24d   (   A_MG_YMV)	// AC <- M[A_MG_YMV] (MG_YMV: "your move!")
@0cf 30db	///             00cf [30db]: STA 0db   (     NXT_MV)	// M[NXT_MV] <- "your move!"
@0d0 40d6	///             00d0 [40d6]: BUN 0d6   ( SET_MG_BRD)	// goto SET_MG_BRD
// set "my move!"
@0d1 2259	///    SET_MMV: 00d1 [2259]: LDA 259   (   A_MG_MMV)	// AC <- M[A_MG_MMV] (MG_MMV: "my move!")
@0d2 30db	///             00d2 [30db]: STA 0db   (     NXT_MV)	// M[NXT_MV] <- "your move!"
@0d3 40d6	///             00d3 [40d6]: BUN 0d6   ( SET_MG_BRD)	// goto SET_MG_BRD
// set "game over!"
@0d4 2263	/// SET_GM_OVR: 00d4 [2263]: LDA 263   (   A_MG_GMO)	// AC <- M[A_MG_GMO] (MG_GMO: "game over!")
@0d5 30db	///             00d5 [30db]: STA 0db   (     NXT_MV)	// M[NXT_MV] <- "game over!"
// set MG_BRD
@0d6 2217	/// SET_MG_BRD: 00d6 [2217]: LDA 217   (        VH4)	// AC <- 4
@0d7 519c	///             00d7 [519c]: BSA 19c   (     SET_ML)	// call SET_ML (set message list)
@0d8 02c1	///             00d8 [02c1]: (  705:  705)            
@0d9 02c7	///             00d9 [02c7]: (  711:  711)            
@0da 02c1	///             00da [02c1]: (  705:  705)            
@0db 0000	///     NXT_MV: 00db [0000]: (    0:    0)            	// (arg4) "your move!" or "my move!" or "game over!"
@0dc c0b5	///             00dc [c0b5]: BUN 0b5 I (  SHOW_GAME)	// return from SHOW_GAME
@0dd 0000	///    PRT_BRD: 00dd [0000]: (    0:    0)            	// return address
//////////// subroutine (print board)  ///////////
@0de a1e4	///             00de [a1e4]: LDA 1e4 I (      P_BRD)	// AC           <- M[M[P_BRD]]
@0df 7004	///             00df [7004]: SZA                    	// (AC == 0) ? skip next
@0e0 40e2	///             00e0 [40e2]: BUN 0e2   (     CPY_BD)	// goto CPY_BD
@0e1 21db	///             00e1 [21db]: LDA 1db   (        TMA)	// AC           <- M[TMA]
@0e2 b1e0	///     CPY_BD: 00e2 [b1e0]: STA 1e0 I (     PTR_MG)	// M[M[PTR_MG]] <- AC
@0e3 61e0	///             00e3 [61e0]: ISZ 1e0   (     PTR_MG)	// ++M[PTR_MG]
@0e4 61e4	///             00e4 [61e4]: ISZ 1e4   (      P_BRD)	// ++M[P_BRD]
@0e5 61db	///             00e5 [61db]: ISZ 1db   (        TMA)	// ++M[TMA]
@0e6 c0dd	///             00e6 [c0dd]: BUN 0dd I (    PRT_BRD)	// return from PRT_BRD
@0e7 0000	///   UPD_TURN: 00e7 [0000]: (    0:    0)            
//////////// subroutine (update turn)  ///////////
@0e8 2203	///             00e8 [2203]: LDA 203   (       TURN)	// AC         <- M[TURN]
@0e9 7200	///             00e9 [7200]: CMA                    	// AC         <- - M[TURN] - 1
@0ea 7020	///             00ea [7020]: INC                    	// AC         <- - M[TURN]
@0eb 7020	///             00eb [7020]: INC                    	// AC         <- 1 - M[TURN]
@0ec 3203	///             00ec [3203]: STA 203   (       TURN)	// M[TURN]    <- 1 - M[TURN]
@0ed 5116	///             00ed [5116]: BSA 116   (    CHK_WIN)	// call CHK_WIN
@0ee 7004	///             00ee [7004]: SZA                    	// (AC == 0) ? skip next (AC = winner mark)
@0ef 40f2	///             00ef [40f2]: BUN 0f2   (   END_TURN)	// goto END_TURN (winner mark != 0)
@0f0 6202	///             00f0 [6202]: ISZ 202   (    CNT_MOV)	// ((++M[CNT_MOV]) == 0) ? skip next
@0f1 40f6	///             00f1 [40f6]: BUN 0f6   (   NXT_TURN)	// goto NXT_TURN
@0f2 2217	///   END_TURN: 00f2 [2217]: LDA 217   (        VH4)	// AC         <- 4
@0f3 31f2	///             00f3 [31f2]: STA 1f2   (    NXT_STT)	// M[NXT_STT] <- 4 (next state : end game)
@0f4 50b5	///             00f4 [50b5]: BSA 0b5   (  SHOW_GAME)	// call SHOW_GAME
@0f5 c0e7	///             00f5 [c0e7]: BUN 0e7 I (   UPD_TURN)	// return from UPD_TURN
@0f6 504d	///   NXT_TURN: 00f6 [504d]: BSA 04d   (   PRP_TURN)	// call PRP_TURN (prepare next turn)
@0f7 50b5	///             00f7 [50b5]: BSA 0b5   (  SHOW_GAME)	// call SHOW_GAME
@0f8 c0e7	///             00f8 [c0e7]: BUN 0e7 I (   UPD_TURN)	// return from UPD_TURN
@0f9 0000	///   CHK_CH_N: 00f9 [0000]: (    0:    0)            
/////////// subroutine (check character) ///////////
// arg0 (AC) : ch (character to identify)
// return AC : (M[TMI] != ch)
@0fa 7200	///             00fa [7200]: CMA                    
@0fb 7020	///             00fb [7020]: INC                    	// AC <- - ch
@0fc 11dd	///             00fc [11dd]: ADD 1dd   (        TMI)	// AC <- M[TMI] - ch
@0fd c0f9	///             00fd [c0f9]: BUN 0f9 I (   CHK_CH_N)	// return from CHK_CH
@0fe 0000	///      CHK_3: 00fe [0000]: (    0:    0)            
//////////// subroutine (check 3-in-a-row)  ///////////
// arg0 (AC)  : pos
// M[BRD_OFS] : offset
// 3 positions : BRD[pos], BRD[pos + offset], BRD[pos + offset * 2]
// return AC (winner) : 'O' or 'X' or 0 (no winner)
@0ff 1205	///             00ff [1205]: ADD 205   (      A_BRD)	// AC        <- pos + M[A_BRD] (BRD + pos)
@100 31e4	///             0100 [31e4]: STA 1e4   (      P_BRD)	// M[P_BRD]  <- BRD + pos
@101 a1e4	///             0101 [a1e4]: LDA 1e4 I (      P_BRD)	// AC        <- M[BRD + pos]
@102 7004	///             0102 [7004]: SZA                    	// (M[BRD + pos] == 0) ? skip next
@103 4105	///             0103 [4105]: BUN 105   (    CHK_3_1)	// goto CHK_3_1
@104 4114	///             0104 [4114]: BUN 114   (  R_CHK_3_0)	// goto R_CHK_3_0 (return 0 : no winner)
@105 31dd	///    CHK_3_1: 0105 [31dd]: STA 1dd   (        TMI)	// M[TMI]    <- M[BRD + pos]
@106 221a	///             0106 [221a]: LDA 21a   (        VM2)	// AC        <- -2
@107 31e2	///             0107 [31e2]: STA 1e2   (      CNT_2)	// M[CNT_2]  <- -2
// loop check board : i = 1, 2 (BRD[pos] == BRD[pos + offset * i])
@108 21e4	///    L_CHK_3: 0108 [21e4]: LDA 1e4   (      P_BRD)	// AC        <- BRD + pos + offset * (i - 1)
@109 11e7	///             0109 [11e7]: ADD 1e7   (    BRD_OFS)	// AC        <- BRD + pos + offset * i
@10a 31e4	///             010a [31e4]: STA 1e4   (      P_BRD)	// M[P_BRD]  <- BRD + pos + offset * i
@10b a1e4	///             010b [a1e4]: LDA 1e4 I (      P_BRD)	// AC        <- M[BRD + pos + offset * i]
@10c 50f9	///             010c [50f9]: BSA 0f9   (   CHK_CH_N)	// call check character
@10d 7004	///             010d [7004]: SZA                    	// (AC == 0) ? skip next
@10e 4114	///             010e [4114]: BUN 114   (  R_CHK_3_0)	// goto R_CHK_3_0 (return 0)
@10f 61e2	///             010f [61e2]: ISZ 1e2   (      CNT_2)	// ((++M[CNT_2]) = 0) ? skip next
@110 4108	///             0110 [4108]: BUN 108   (    L_CHK_3)	// goto L_CHK_3 (loop check board)
// this is 3-in-a-row!!
@111 21dd	///             0111 [21dd]: LDA 1dd   (        TMI)	// AC        <- M[BRD + pos] (winner mark)
@112 3204	///             0112 [3204]: STA 204   (     WINNER)	// M[WINNER] <- winner mark
@113 c0fe	///             0113 [c0fe]: BUN 0fe I (      CHK_3)	// return from CHK_3
@114 7800	///  R_CHK_3_0: 0114 [7800]: CLA                    	// AC <- 0
@115 c0fe	///             0115 [c0fe]: BUN 0fe I (      CHK_3)	// return from CHK_3
@116 0000	///    CHK_WIN: 0116 [0000]: (    0:    0)            
//////////// subroutine (check winner)  ///////////
// return AC (winner) : 'O' or 'X' or 0 (no winner)
@117 221d	///             0117 [221d]: LDA 21d   (        VM8)	// AC         <- -8
@118 31e1	///             0118 [31e1]: STA 1e1   (      CNT_1)	// M[CNT_1]   <- 8
@119 22d5	///             0119 [22d5]: LDA 2d5   (       A_CW)	// AC         <- M[A_CW] (CW)
@11a 32d4	///             011a [32d4]: STA 2d4   (       P_CW)	// M[P_CW]    <- CW
// loop check winner
@11b a2d4	///  L_CHK_WIN: 011b [a2d4]: LDA 2d4 I (       P_CW)	// AC         <- M[M[P_CW]] (offset)
@11c 31e7	///             011c [31e7]: STA 1e7   (    BRD_OFS)	// M[BRD_OFS] <- offset
@11d 62d4	///             011d [62d4]: ISZ 2d4   (       P_CW)	// ++M[P_CW]
@11e a2d4	///             011e [a2d4]: LDA 2d4 I (       P_CW)	// AC         <- M[M[P_CW]] (pos)
@11f 62d4	///             011f [62d4]: ISZ 2d4   (       P_CW)	// ++M[P_CW]
@120 50fe	///             0120 [50fe]: BSA 0fe   (      CHK_3)	// call CHK_3
@121 7004	///             0121 [7004]: SZA                    	// (AC == 0) ? skip next
@122 c116	///             0122 [c116]: BUN 116 I (    CHK_WIN)	// return from CHK_WIN (AC != 0 : winner mark)
@123 61e1	///             0123 [61e1]: ISZ 1e1   (      CNT_1)	// ((++M[CNT_1]) == 0) ? skip next
@124 411b	///             0124 [411b]: BUN 11b   (  L_CHK_WIN)	// goto L_CHK_WIN (loop check winner)
@125 c116	///             0125 [c116]: BUN 116 I (    CHK_WIN)	// return from CHK_WIN (AC == 0 : no winner)
@126 0000	///  MY_DM_MOV: 0126 [0000]: (    0:    0)            
/////////// subroutine (my dumb move) //////////
@127 2205	///             0127 [2205]: LDA 205   (      A_BRD)	// AC <- M[A_BRD] (BRD)
@128 31e4	///             0128 [31e4]: STA 1e4   (      P_BRD)	// M[P_BRD] <- BRD
// loop check board : pos = 0, 1, ... 8
@129 a1e4	///  L_CHK_BRD: 0129 [a1e4]: LDA 1e4 I (      P_BRD)	// AC <- M[BRD + pos]
@12a 7004	///             012a [7004]: SZA                    	// (M[BRD + pos] == 0) ? skip next
@12b 412d	///             012b [412d]: BUN 12d   (  N_CHK_BRD)	// goto N_CHK_BRD
@12c c126	///             012c [c126]: BUN 126 I (  MY_DM_MOV)	// return from MY_DM_MOV
@12d 61e4	///  N_CHK_BRD: 012d [61e4]: ISZ 1e4   (      P_BRD)	// ++M[P_BRD]
@12e 4129	///             012e [4129]: BUN 129   (  L_CHK_BRD)	// goto L_CHK_BRD (loop check board)
@12f 0000	///     MY_MOV: 012f [0000]: (    0:    0)            
/////////// subroutine (my move) //////////
// M[BRD_POS] : pos
@130 7800	///             0130 [7800]: CLA                    	// AC          <- 0
@131 31e8	///             0131 [31e8]: STA 1e8   (    BRD_POS)	// M[BRD_POS]  <- 0 (pos = 0)
@132 31e9	///             0132 [31e9]: STA 1e9   (    N_P_BRD)	// M[N_P_BRD]  <- 0
@133 2205	///             0133 [2205]: LDA 205   (      A_BRD)	// AC          <- M[A_BRD] (BRD)
@134 31e4	///             0134 [31e4]: STA 1e4   (      P_BRD)	// M[P_BRD]    <- BRD
@135 221e	///             0135 [221e]: LDA 21e   (        VM9)	// AC          <- -9
@136 31e2	///             0136 [31e2]: STA 1e2   (      CNT_2)	// M[CNT_2]    <- -9
// loop check board : pos = 0, 1, ... 8
@137 a1e4	///  L_CHK_POS: 0137 [a1e4]: LDA 1e4 I (      P_BRD)	// AC          <- M[BRD + pos]
@138 7004	///             0138 [7004]: SZA                    	// (M[BRD + pos] == 0) ? skip next
@139 413d	///             0139 [413d]: BUN 13d   (  N_CHK_POS)	// goto N_CHK_POS (++pos) (M[BRD + pos] != 0 : occupied)
@13a 5152	///             013a [5152]: BSA 152   (        WBF)	// call WBF (WinBlockFork)
@13b 7004	///             013b [7004]: SZA                    	// (AC == 0) ? skip next
@13c c12f	///             013c [c12f]: BUN 12f I (     MY_MOV)	// return from MY_MOV
// ++pos
@13d 61e8	///  N_CHK_POS: 013d [61e8]: ISZ 1e8   (    BRD_POS)	// ++M[BRD_POS]
@13e 61e4	///             013e [61e4]: ISZ 1e4   (      P_BRD)	// ++M[P_BRD]
@13f 61e2	///             013f [61e2]: ISZ 1e2   (      CNT_2)	// ((++M[CNT_2]) == 0) ? skip next
@140 4137	///             0140 [4137]: BUN 137   (  L_CHK_POS)	// goto L_CHK_BRD (loop check board)
// check (M[N_P_BRD] != 0) ? 
@141 21e9	///             0141 [21e9]: LDA 1e9   (    N_P_BRD)	// AC <- M[N_P_BRD]
@142 7004	///             0142 [7004]: SZA                    	// (M[N_P_BRDto
@143 4146	///             0143 [4146]: BUN 146   (PUT_NXT_POS)	// goto PUT_NXT_POS (M[N_P_BRD] != 0)
@144 5126	///             0144 [5126]: BSA 126   (  MY_DM_MOV)	// call MY_DM_MOV (my dumb move)
@145 c12f	///             0145 [c12f]: BUN 12f I (     MY_MOV)	// return from MY_MOV
@146 31e4	///PUT_NXT_POS: 0146 [31e4]: STA 1e4   (      P_BRD)	// M[P_BRD]     <- M[N_P_BRD]
@147 c12f	///             0147 [c12f]: BUN 12f I (     MY_MOV)	// return from MY_MOV
@148 0000	///    LD_TBRD: 0148 [0000]: (    0:    0)            
/////////// subroutine (load traslated board position) //////////
// arg 0 (AC) : table-addr (H1, H2, V1, V2, D1, D2, D3, D4)
// M[BRD_POS] : pos
// return (AC < 0) : invalid transposition (happens on diagonal translations on edge positions)
// return (AC >= 0) : translated board position (M[BRD + M[table-addr + pos]])
@149 11e8	///             0149 [11e8]: ADD 1e8   (    BRD_POS)	// AC <- table-addr + pos
@14a 31db	///             014a [31db]: STA 1db   (        TMA)	// M[TMA] <- table-addr + pos
@14b a1db	///             014b [a1db]: LDA 1db I (        TMA)	// AC <- M[table-addr + pos]
@14c 7010	///             014c [7010]: SPA                    	// (M[table-addr + pos] >= 0) ? skip next
@14d c148	///             014d [c148]: BUN 148 I (    LD_TBRD)	// return from LD_TBRD (AC < 0 : invalid translation)
@14e 1205	///             014e [1205]: ADD 205   (      A_BRD)	// AC <- BRD + M[table-addr + pos]
@14f 31db	///             014f [31db]: STA 1db   (        TMA)	// M[TMA] <- BRD + M[table-addr + pos]
@150 a1db	///             0150 [a1db]: LDA 1db I (        TMA)	// AC <- M[BRD + M[table-addr + pos]]
@151 c148	///             0151 [c148]: BUN 148 I (    LD_TBRD)	// return from LD_TBRD (AC >= 0 : valid translated board position)
@152 0000	///        WBF: 0152 [0000]: (    0:    0)            
/////////// subroutine (WinBlockFork) //////////
// M[BRD_POS] : pos
// return 0 : not my win...
// return 1 : my win!!!
@153 7800	///             0153 [7800]: CLA                    	// AC <- 0
@154 31ed	///             0154 [31ed]: STA 1ed   (      MY_LN)	// M[MY_LN] <- 0
@155 31ee	///             0155 [31ee]: STA 1ee   (     MY_BLK)	// M[MY_BLK] <- 0
@156 22e7	///             0156 [22e7]: LDA 2e7   (      A_HVD)	// AC <- M[A_HVD] (HVD)
@157 32e6	///             0157 [32e6]: STA 2e6   (      P_HVD)	// M[P_HVD] <- HVD (M[HVD] = {H1, H2, V1, V2, D1, D2, D3, D4})
@158 221c	///             0158 [221c]: LDA 21c   (        VM4)	// AC <- -4
@159 31e1	///             0159 [31e1]: STA 1e1   (      CNT_1)	// M[CNT_1] <- -4
// loop WBF
@15a a2e6	///      L_WBF: 015a [a2e6]: LDA 2e6 I (      P_HVD)	// AC <- M[HVD] ({H1, H2, V1, V2, D1, D2, D3, D4})
@15b 62e6	///             015b [62e6]: ISZ 2e6   (      P_HVD)	// ++M[P_HVD]
// load BRD_1
@15c 5148	///             015c [5148]: BSA 148   (    LD_TBRD)	// call LD_TBRD (load translated board position)
@15d 7010	///             015d [7010]: SPA                    	// (M[BRD + M[M[HVD] + pos]] >= 0) ? skip next
@15e 4169	///             015e [4169]: BUN 169   (      WBF_2)	// goto WBF_2 (invalid transposition : exit L_WBF loop)
@15f 31ea	///             015f [31ea]: STA 1ea   (      BRD_1)	// M[BRD_1] <- M[BRD + M[M[HVD] + pos]]
@160 a2e6	///             0160 [a2e6]: LDA 2e6 I (      P_HVD)	// AC <- M[HVD] ({H1, H2, V1, V2, D1, D2, D3, D4})
@161 62e6	///             0161 [62e6]: ISZ 2e6   (      P_HVD)	// ++M[P_HVD]
// load BRD_2
@162 5148	///             0162 [5148]: BSA 148   (    LD_TBRD)	// call LD_TBRD (load translated board position)
@163 31eb	///             0163 [31eb]: STA 1eb   (      BRD_2)	// M[BRD_2] <- M[BRD + M[HVD] + pos]]
// call WBF_POS (WinBlockForkPos)
@164 5177	///             0164 [5177]: BSA 177   (    WBF_POS)	// call WBF_POS (WinBlockForkPos)
@165 7004	///             0165 [7004]: SZA                    	// (AC == 0) ? skip next
@166 c152	///             0166 [c152]: BUN 152 I (        WBF)	// return from WBF (return 1 : my win!!!)
@167 61e1	///             0167 [61e1]: ISZ 1e1   (      CNT_1)	// ((++M[CNT_1]) == 0) ? skip next
@168 415a	///             0168 [415a]: BUN 15a   (      L_WBF)	// goto (loop WBF)
// (M[MY_BLK] != 0 || M[MY_LN] >= 2 && M[N_P_BRD] == 0) ? M[N_P_BRD] <- M[P_BRD]
@169 21ee	///      WBF_2: 0169 [21ee]: LDA 1ee   (     MY_BLK)	// AC <- M[MY_BLK]
@16a 7004	///             016a [7004]: SZA                    	// (M[MY_BLK] == 0) ? skip next
@16b 4173	///             016b [4173]: BUN 173   (   SET_NPOS)	// goto SET_NPOS (M[MY_BLK] > 0 : need to block this position)
// check my fork (M[MY_LN] >= 2)
@16c 21ed	///             016c [21ed]: LDA 1ed   (      MY_LN)	// AC <- M[MY_LN]
@16d 121a	///             016d [121a]: ADD 21a   (        VM2)	// AC <- M[MY_LN] - 2
@16e 7010	///             016e [7010]: SPA                    	// (M[MY_LN] >= 2) ? skip next
@16f 4175	///             016f [4175]: BUN 175   (    R_WBF_0)	// goto R_WBF_0 (skip SET_NPOS)
// check (M[N_P_BRD] != 0)
@170 21e9	///             0170 [21e9]: LDA 1e9   (    N_P_BRD)	// AC <- M[N_P_BRD]
@171 7004	///             0171 [7004]: SZA                    	// (M[N_P_BRD] != 0) ? skip next
@172 4175	///             0172 [4175]: BUN 175   (    R_WBF_0)	// goto R_WBF_0 (skip SET_NPOS)
@173 21e4	///   SET_NPOS: 0173 [21e4]: LDA 1e4   (      P_BRD)	// AC <- current BRD pointer
@174 31e9	///             0174 [31e9]: STA 1e9   (    N_P_BRD)	// M[N_P_BRD] <- current BRD pointer (I should take this position if I don't win this turn)
// return 0 : not my win...
@175 7800	///    R_WBF_0: 0175 [7800]: CLA                    	// AC <- 0
@176 c152	///             0176 [c152]: BUN 152 I (        WBF)	// return from WBF (not my win...)
@177 0000	///    WBF_POS: 0177 [0000]: (    0:    0)            
/////////// subroutine (WinBlockForkPos) //////////
// M[BRD_1] : brd[pos1]
// M[BRD_2] : brd[pos2]
// return 0 : not my win...
// return 1 : my win!!!
@178 21ea	///             0178 [21ea]: LDA 1ea   (      BRD_1)	// AC           <- M[BRD_1]
@179 11eb	///             0179 [11eb]: ADD 1eb   (      BRD_2)	// AC           <- M[BRD_1] + M[BRD_2]
@17a 7200	///             017a [7200]: CMA                    
@17b 7020	///             017b [7020]: INC                    	// AC           <- -(M[BRD_1] + M[BRD_2])
@17c 31ec	///             017c [31ec]: STA 1ec   (  BRD_SUM_N)	// M[BRD_SUM_N] <- -(M[BRD_1] + M[BRD_2])
// check my two-in-a-row : (M[BRD_1] == M[BRD_2] == M[MY_MK])
@17d 1225	///             017d [1225]: ADD 225   (    MY_MK_2)	// AC <- M[MY_MK_2] - (M[BRD_1] + M[BRD_2]) (M[MY_MK_2] = M[MY_MK] * 2)
@17e 7004	///             017e [7004]: SZA                    	// (M[MY_MK] * 2 == M[BRD_1] + M[BRD_2]) ? skip next
@17f 4182	///             017f [4182]: BUN 182   (    CHK_YL2)	// goto CHK_YL2 (check your two-in-a-row)
@180 2214	///             0180 [2214]: LDA 214   (        VH1)	// AC           <- 1
@181 c177	///             0181 [c177]: BUN 177 I (    WBF_POS)	// return from WBF_POS (return AC = 1 : my win!!!)
// check your two-in-a-row (M[BRD_1] == M[BRD_2] == M[YR_MK])
@182 21ec	///    CHK_YL2: 0182 [21ec]: LDA 1ec   (  BRD_SUM_N)	// AC           <- -(M[BRD_1] + M[BRD_2])
@183 1226	///             0183 [1226]: ADD 226   (    YR_MK_2)	// AC           <- M[YR_MK_2] - (M[BRD_1] + M[BRD_2]) (M[YR_MK_2] = M[YR_MK] * 2)
@184 7004	///             0184 [7004]: SZA                    	// (M[YR_MK] * 2 == M[BRD_2] + M[BRD_1]) ? skip next
@185 4188	///             0185 [4188]: BUN 188   (    CHK_ML1)	// goto CHK_MY1 (check myLine)
@186 61ee	///             0186 [61ee]: ISZ 1ee   (     MY_BLK)	// ++M[MY_BLK] (block your two-in-a-row)
@187 c177	///             0187 [c177]: BUN 177 I (    WBF_POS)	// return from WBF_POS (return AC = 0)
// check myLine (M[MY_MK] == M[BRD_2] + M[BRD_1])
@188 21ec	///    CHK_ML1: 0188 [21ec]: LDA 1ec   (  BRD_SUM_N)	// AC           <- -(M[BRD_1] + M[BRD_2])
@189 1223	///             0189 [1223]: ADD 223   (      MY_MK)	// AC           <- M[MY_MK] - (M[BRD_1] + M[BRD_2])
@18a 7004	///             018a [7004]: SZA                    	// (M[MY_MK] == M[BRD_2] + M[BRD_1]) ? skip next
@18b 418d	///             018b [418d]: BUN 18d   (R_WBF_POS_0)	// goto R_WBR_POS_0 (return 0)
@18c 61ed	///             018c [61ed]: ISZ 1ed   (      MY_LN)	// ++M[MY_LN]
// return 0
@18d 7800	///R_WBF_POS_0: 018d [7800]: CLA                    	// AC           <- 0
@18e c177	///             018e [c177]: BUN 177 I (    WBF_POS)	// return from WBF_POS (return AC = 0)
@18f 0000	///    SET_MGP: 018f [0000]: (    0:    0)            
/////////// subroutine (set single message for gpio output) //////////
// arg(1) : message address
@190 7800	///             0190 [7800]: CLA                    	// AC <- 0
@191 7200	///             0191 [7200]: CMA                    	// AC <- -1
@192 31f5	///             0192 [31f5]: STA 1f5   (     CNT_MG)	// M[CNT_MG]      <- - 1 (message count = 1)
@193 21f7	///             0193 [21f7]: LDA 1f7   (   A_MG_LST)	// AC             <- M[A_MG_LST] (MG_LIST)
@194 31f6	///             0194 [31f6]: STA 1f6   (   P_MG_LST)	// M[P_MG_LST]    <- MG_LIST
@195 a18f	///             0195 [a18f]: LDA 18f I (    SET_MGP)	// AC             <- M[M[SET_MGP]] (arg(i))
@196 b1f6	///             0196 [b1f6]: STA 1f6 I (   P_MG_LST)	// M[MG_LIST]     <- arg(1)
// load 1st message
@197 51b3	///             0197 [51b3]: BSA 1b3   (     LD_MSG)	// call LD_MSG (load message info)
// output to gpio
@198 2215	///             0198 [2215]: LDA 215   (        VH2)	// AC <- 2
@199 f010	///             0199 [f010]: IOS                    	// IOSEL <- 2 (uart input, gpio output)
@19a 618f	///             019a [618f]: ISZ 18f   (    SET_MGP)	// ++M[SET_MGP]
@19b c18f	///             019b [c18f]: BUN 18f I (    SET_MGP)	// return from SET_MGP
@19c 0000	///     SET_ML: 019c [0000]: (    0:    0)            
/////////// subroutine (set message list) //////////
// arg0 (AC) : msg_count
// arg(1), arg(2), ... : message addresses (# of arguments = msg_count)
@19d 7020	///             019d [7020]: INC                    	// AC             <- (msg_count + 1)
@19e 7200	///             019e [7200]: CMA                    	// AC             <- - (msg_count + 2)
@19f 31f5	///             019f [31f5]: STA 1f5   (     CNT_MG)	// M[CNT_MG]      <- - (msg_count + 2) (2 newlines)
@1a0 7020	///             01a0 [7020]: INC                    
@1a1 7020	///             01a1 [7020]: INC                    
@1a2 31db	///             01a2 [31db]: STA 1db   (        TMA)	// M[TMA]         <- - msg_count
@1a3 21f7	///             01a3 [21f7]: LDA 1f7   (   A_MG_LST)	// AC             <- M[A_MG_LST] (MG_LIST)
@1a4 31f6	///             01a4 [31f6]: STA 1f6   (   P_MG_LST)	// M[P_MG_LST]    <- MG_LIST
@1a5 31dc	///             01a5 [31dc]: STA 1dc   (        TMB)	// M[TMB]         <- MG_LIST
// put 1st newline at head
@1a6 2241	///             01a6 [2241]: LDA 241   (    A_MG_NL)	// AC             <- M[A_MG_NL] (MG_NL)
@1a7 b1dc	///             01a7 [b1dc]: STA 1dc I (        TMB)	// M[M[TMB]]      <- MG_NL
@1a8 61dc	///             01a8 [61dc]: ISZ 1dc   (        TMB)	// ++M[TMB]
// loop set message : i = 1, 2, ..., msg_count
@1a9 a19c	///   L_SET_ML: 01a9 [a19c]: LDA 19c I (     SET_ML)	// AC             <- M[M[SET_ML]] (arg(i))
@1aa b1dc	///             01aa [b1dc]: STA 1dc I (        TMB)	// M[MG_LIST + i] <- arg(i)
@1ab 619c	///             01ab [619c]: ISZ 19c   (     SET_ML)	// ++M[SET_ML]
@1ac 61dc	///             01ac [61dc]: ISZ 1dc   (        TMB)	// ++M[TMB]
@1ad 61db	///             01ad [61db]: ISZ 1db   (        TMA)	// ((++M[TMA]) == 0) ? skip next
@1ae 41a9	///             01ae [41a9]: BUN 1a9   (   L_SET_ML)	// goto L_SET_ML (loop set message)
// put 2nd newline at head
@1af 2241	///             01af [2241]: LDA 241   (    A_MG_NL)	// AC             <- M[A_MG_NL] (MG_NL)
@1b0 b1dc	///             01b0 [b1dc]: STA 1dc I (        TMB)	// M[MG_LIST + msg_count + 1] <- MG_NL
// load 1st message
@1b1 51b3	///             01b1 [51b3]: BSA 1b3   (     LD_MSG)	// call LD_MSG (load message info)
@1b2 c19c	///             01b2 [c19c]: BUN 19c I (     SET_ML)	// return from SET_ML
@1b3 0000	///     LD_MSG: 01b3 [0000]: (    0:    0)            
/////////// subroutine (load message info) //////////
@1b4 a1f6	///             01b4 [a1f6]: LDA 1f6 I (   P_MG_LST)	// AC        <- M[M[P_MG_LST]] (message address)
@1b5 31e0	///             01b5 [31e0]: STA 1e0   (     PTR_MG)	// M[PTR_MG] <- M[M[P_MG_LST]] (message address)
@1b6 a1e0	///             01b6 [a1e0]: LDA 1e0 I (     PTR_MG)	// AC        <- M[M[PTR_MG]] (message length)
@1b7 7200	///             01b7 [7200]: CMA                    
@1b8 7020	///             01b8 [7020]: INC                    	// AC        <- - (message length)
@1b9 31e3	///             01b9 [31e3]: STA 1e3   (     CNT_CH)	// M[CNT_CH] <- message count
@1ba 61e0	///             01ba [61e0]: ISZ 1e0   (     PTR_MG)	// ++M[PTR_MG] (message starts from the next address)
@1bb 61f6	///             01bb [61f6]: ISZ 1f6   (   P_MG_LST)	// ++M[P_MG_LST]
@1bc c1b3	///             01bc [c1b3]: BUN 1b3 I (     LD_MSG)	// return from SET_MSG
/////////// process output //////////
@1bd f100	///    PUT_OUT: 01bd [f100]: SKO                    	// (FGO = 0) ? skip next
@1be 4043	///             01be [4043]: BUN 043   (        IRT)	// goto IRT (return from interrupt handler) --> this should not happen...
// output 1 message character at address M[PTR_MG]
@1bf a1e0	///             01bf [a1e0]: LDA 1e0 I (     PTR_MG)	// AC   <- M[M[PTR_MG]]
@1c0 f400	///             01c0 [f400]: OUT                    	// OUTR <- AC(7:0)
@1c1 61e0	///             01c1 [61e0]: ISZ 1e0   (     PTR_MG)	// ++M[PTR_MG]
@1c2 61e3	///             01c2 [61e3]: ISZ 1e3   (     CNT_CH)	// ((++M[CNT_CH]) == 0) ? skip next
// message string pending ...
@1c3 4043	///             01c3 [4043]: BUN 043   (        IRT)	// goto IRT (return from interrupt handler)
// message string terminated
@1c4 61f5	///             01c4 [61f5]: ISZ 1f5   (     CNT_MG)	// ((++M[CNT_MG]) = 0) ? skip next
@1c5 41d4	///             01c5 [41d4]: BUN 1d4   (    NXT_MSG)	// goto NXT_MSG (load next message)
// all message processed
@1c6 7800	///             01c6 [7800]: CLA                    	// AC         <- 0
@1c7 31f3	///             01c7 [31f3]: STA 1f3   (    OUT_STT)	// M[OUT_STT] <- 0
@1c8 21f2	///             01c8 [21f2]: LDA 1f2   (    NXT_STT)	// AC         <- M[NXT_STT]
@1c9 31f1	///             01c9 [31f1]: STA 1f1   (        STT)	// M[STT]     <- M[NXT_STT]
@1ca 2216	///             01ca [2216]: LDA 216   (        VH3)	// AC <- 3
@1cb f010	///             01cb [f010]: IOS                    	// IOSEL <- 3 (uart input, uart output)
@1cc 21f0	///             01cc [21f0]: LDA 1f0   (    NXT_BYE)	// AC         <- M[NXT_BYE]
@1cd 31ef	///             01cd [31ef]: STA 1ef   (        BYE)	// M[BYE]     <- M[NXT_BYE]
@1ce 7004	///             01ce [7004]: SZA                    	// (AC = 0) ? skip next
@1cf 41d6	///             01cf [41d6]: BUN 1d6   (    CHG_INP)	// goto CHG_INP (M[BYE] = 1 : prepare to terminate program...)
@1d0 21f4	///             01d0 [21f4]: LDA 1f4   (    NXT_INP)	// AC <- M[NXT_INP]
@1d1 7004	///             01d1 [7004]: SZA                    	// (AC = 0) ? skip next
@1d2 41d6	///             01d2 [41d6]: BUN 1d6   (    CHG_INP)	// goto CHG_INP (M[NXT_INP] = 1 : change to input mode)
@1d3 4030	///             01d3 [4030]: BUN 030   (     STT_SW)	// goto STT_SW (state switch)
// load next message
@1d4 51b3	///    NXT_MSG: 01d4 [51b3]: BSA 1b3   (     LD_MSG)	// call LD_MSG (load message info)
@1d5 4043	///             01d5 [4043]: BUN 043   (        IRT)	// goto IRT (return from interrupt handler)
// change to input mode
@1d6 7800	///    CHG_INP: 01d6 [7800]: CLA                    	// AC         <- 0
@1d7 31f4	///             01d7 [31f4]: STA 1f4   (    NXT_INP)	// M[NXT_INP] <- 0
@1d8 2210	///             01d8 [2210]: LDA 210   (        EIM)	// AC         <- M[EIM] (initial value = 1)
@1d9 f020	///             01d9 [f020]: IMK                    	// IMASK      <- AC[1:0] (input enabled, output disabled)
@1da 4043	///             01da [4043]: BUN 043   (        IRT)	// goto IRT (return from interrupt handler)
// data (no initialization)
@1db 0000	///        TMA: 01db [0000]: (    0:    0)            	// temporal
@1dc 0000	///        TMB: 01dc [0000]: (    0:    0)            	// temporal
@1dd 0000	///        TMI: 01dd [0000]: (    0:    0)            	// char (raw) input
@1de 0000	///         BA: 01de [0000]: (    0:    0)            	// backup storage for AC during interrupt handling
@1df 0000	///         BE: 01df [0000]: (    0:    0)            	// backup storage for  E during interrupt handling
@1e0 0000	///     PTR_MG: 01e0 [0000]: (    0:    0)            	// message pointer
@1e1 0000	///      CNT_1: 01e1 [0000]: (    0:    0)            	// counter 1
@1e2 0000	///      CNT_2: 01e2 [0000]: (    0:    0)            	// counter 2
@1e3 0000	///     CNT_CH: 01e3 [0000]: (    0:    0)            	// char counter
@1e4 0000	///      P_BRD: 01e4 [0000]: (    0:    0)            	// pointer to BRD
@1e5 0000	///   P_MY_LNC: 01e5 [0000]: (    0:    0)            	// pointer to MY_LNC
@1e6 0000	///   P_YR_LNC: 01e6 [0000]: (    0:    0)            	// pointer to YR_LNC
@1e7 0000	///    BRD_OFS: 01e7 [0000]: (    0:    0)            	// BRD offset
@1e8 0000	///    BRD_POS: 01e8 [0000]: (    0:    0)            	// BRD pos
@1e9 0000	///    N_P_BRD: 01e9 [0000]: (    0:    0)            	// pointer to BRD for my next move
@1ea 0000	///      BRD_1: 01ea [0000]: (    0:    0)            	// brd[pos1]
@1eb 0000	///      BRD_2: 01eb [0000]: (    0:    0)            	// brd[pos2]
@1ec 0000	///  BRD_SUM_N: 01ec [0000]: (    0:    0)            	// -(brd[pos1] + brd[pos2])
@1ed 0000	///      MY_LN: 01ed [0000]: (    0:    0)            	// myLine
@1ee 0000	///     MY_BLK: 01ee [0000]: (    0:    0)            	// myBlock
// data (need initialization code : one-time)
@1ef 0000	///        BYE: 01ef [0000]: (    0:    0)            	// (init: 0) bye
@1f0 0000	///    NXT_BYE: 01f0 [0000]: (    0:    0)            	// (init: 0) next bye
@1f1 0000	///        STT: 01f1 [0000]: (    0:    0)            	// (init: 0) current state
@1f2 0000	///    NXT_STT: 01f2 [0000]: (    0:    0)            	// (init: 0) next state
@1f3 0000	///    OUT_STT: 01f3 [0000]: (    0:    0)            	// (init: 0) output state
@1f4 0000	///    NXT_INP: 01f4 [0000]: (    0:    0)            	// (init: 0) next process input
@1f5 0000	///     CNT_MG: 01f5 [0000]: (    0:    0)            	// message count
@1f6 0000	///   P_MG_LST: 01f6 [0000]: (    0:    0)            	// message list pointer
@1f7 01f8	///   A_MG_LST: 01f7 [01f8]: (  504:  504)            
@1f8 0000	///     MG_LST: 01f8 [0000]: (    0:    0)            	// message pointer list (up to 8+2 messages)
@1f9 0000	///             01f9 [0000]: (    0:    0)            
@1fa 0000	///             01fa [0000]: (    0:    0)            
@1fb 0000	///             01fb [0000]: (    0:    0)            
@1fc 0000	///             01fc [0000]: (    0:    0)            
@1fd 0000	///             01fd [0000]: (    0:    0)            
@1fe 0000	///             01fe [0000]: (    0:    0)            
@1ff 0000	///             01ff [0000]: (    0:    0)            
@200 0000	///             0200 [0000]: (    0:    0)            
@201 0000	///             0201 [0000]: (    0:    0)            
// data (need initialization code : after every game -> INI_GM)
@202 0000	///    CNT_MOV: 0202 [0000]: (    0:    0)            	// move counter
@203 0000	///       TURN: 0203 [0000]: (    0:    0)            	// 0 : your turn, 1 : my turn
@204 0000	///     WINNER: 0204 [0000]: (    0:    0)            	// winner
// BRD : brd[9]
// position : on screen
//    012       123
//    345       456
//    678       789
@205 0206	///      A_BRD: 0205 [0206]: (  518:  518)            
@206 0000	///        BRD: 0206 [0000]: (    0:    0)            
@207 0000	///             0207 [0000]: (    0:    0)            
@208 0000	///             0208 [0000]: (    0:    0)            
@209 0000	///             0209 [0000]: (    0:    0)            
@20a 0000	///             020a [0000]: (    0:    0)            
@20b 0000	///             020b [0000]: (    0:    0)            
@20c 0000	///             020c [0000]: (    0:    0)            
@20d 0000	///             020d [0000]: (    0:    0)            
@20e 0000	///             020e [0000]: (    0:    0)            
// data (read-only)
@20f 0001	///        EOM: 020f [0001]: (    1:    1)            	// enable output mask (disable input)
@210 0002	///        EIM: 0210 [0002]: (    2:    2)            	// enable input mask (disable output)
@211 0003	///        IOM: 0211 [0003]: (    3:    3)            	// io mask : 11 means UART is enabled at input and output
@212 fff0	///        AMK: 0212 [fff0]: (  -16:65520)            	// AMK = FFF0 (and mask)
@213 000f	///       AMKN: 0213 [000f]: (   15:   15)            	// AMKN = 000F (and mask negated)
@214 0001	///        VH1: 0214 [0001]: (    1:    1)            	// VH1 = 1
@215 0002	///        VH2: 0215 [0002]: (    2:    2)            	// VH2 = 2
@216 0003	///        VH3: 0216 [0003]: (    3:    3)            	// VH3 = 3
@217 0004	///        VH4: 0217 [0004]: (    4:    4)            	// VH4 = 4
@218 0005	///        VH5: 0218 [0005]: (    5:    5)            	// VH5 = 5
@219 ffff	///        VM1: 0219 [ffff]: (   -1:65535)            	// VM1 = -1
@21a fffe	///        VM2: 021a [fffe]: (   -2:65534)            	// VM2 = -2
@21b fffd	///        VM3: 021b [fffd]: (   -3:65533)            	// VM2 = -3
@21c fffc	///        VM4: 021c [fffc]: (   -4:65532)            	// VM2 = -4
@21d fff8	///        VM8: 021d [fff8]: (   -8:65528)            	// VM2 = -8
@21e fff7	///        VM9: 021e [fff7]: (   -9:65527)            	// VM2 = -9
@21f fff6	///       VM10: 021f [fff6]: (  -10:65526)            	// VM10 = -10
@220 0030	///       CH_0: 0220 [0030]: (   48:  '0')            
@221 0031	///       CH_1: 0221 [0031]: (   49:  '1')            
@222 0079	///      CH_LY: 0222 [0079]: (  121:  'y')            
@223 0058	///      MY_MK: 0223 [0058]: (   88:  'X')            
@224 004f	///      YR_MK: 0224 [004f]: (   79:  'O')            
@225 00b0	///    MY_MK_2: 0225 [00b0]: (  176:  176)            	// (0x58('X') * 2)
@226 009e	///    YR_MK_2: 0226 [009e]: (  158:  158)            	// (0x4F('O') * 2)
@227 0017	///    MG_WELC: 0227 [0017]: (   23:   23)            	// MG_WELC length
@228 0057	///             0228 [0057]: (   87:  'W')            
@229 0045	///             0229 [0045]: (   69:  'E')            
@22a 004c	///             022a [004c]: (   76:  'L')            
@22b 0043	///             022b [0043]: (   67:  'C')            
@22c 004f	///             022c [004f]: (   79:  'O')            
@22d 004d	///             022d [004d]: (   77:  'M')            
@22e 0045	///             022e [0045]: (   69:  'E')            
@22f 0020	///             022f [0020]: (   32:  ' ')            	// ' '
@230 0054	///             0230 [0054]: (   84:  'T')            
@231 004f	///             0231 [004f]: (   79:  'O')            
@232 0020	///             0232 [0020]: (   32:  ' ')            	// ' '
@233 0054	///             0233 [0054]: (   84:  'T')            
@234 0049	///             0234 [0049]: (   73:  'I')            
@235 0043	///             0235 [0043]: (   67:  'C')            
@236 002d	///             0236 [002d]: (   45:  '-')            
@237 0054	///             0237 [0054]: (   84:  'T')            
@238 0041	///             0238 [0041]: (   65:  'A')            
@239 0043	///             0239 [0043]: (   67:  'C')            
@23a 002d	///             023a [002d]: (   45:  '-')            
@23b 0054	///             023b [0054]: (   84:  'T')            
@23c 004f	///             023c [004f]: (   79:  'O')            
@23d 0045	///             023d [0045]: (   69:  'E')            
@23e 0021	///             023e [0021]: (   33:  '!')            
@23f 0001	///   MG_MY_MV: 023f [0001]: (    1:    1)            	// MG_MY_MV length
@240 0000	///  MG_MY_MV0: 0240 [0000]: (    0:    0)            
@241 0242	///    A_MG_NL: 0241 [0242]: (  578:  578)            
@242 0001	///      MG_NL: 0242 [0001]: (    1:    1)            	// MG_NL length
@243 000a	///             0243 [000a]: (   10:   10)            	// '\n'
@244 0008	///     MG_BYE: 0244 [0008]: (    8:    8)            	// MG_BYE length
@245 0062	///             0245 [0062]: (   98:  'b')            
@246 0079	///             0246 [0079]: (  121:  'y')            
@247 0065	///             0247 [0065]: (  101:  'e')            
@248 002d	///             0248 [002d]: (   45:  '-')            
@249 0062	///             0249 [0062]: (   98:  'b')            
@24a 0079	///             024a [0079]: (  121:  'y')            
@24b 0065	///             024b [0065]: (  101:  'e')            
@24c 0021	///             024c [0021]: (   33:  '!')            
@24d 024e	///   A_MG_YMV: 024d [024e]: (  590:  590)            
@24e 000a	///     MG_YMV: 024e [000a]: (   10:   10)            	// MG_YMV length
@24f 0079	///             024f [0079]: (  121:  'y')            
@250 006f	///             0250 [006f]: (  111:  'o')            
@251 0075	///             0251 [0075]: (  117:  'u')            
@252 0072	///             0252 [0072]: (  114:  'r')            
@253 0020	///             0253 [0020]: (   32:  ' ')            	// ' '
@254 006d	///             0254 [006d]: (  109:  'm')            
@255 006f	///             0255 [006f]: (  111:  'o')            
@256 0076	///             0256 [0076]: (  118:  'v')            
@257 0065	///             0257 [0065]: (  101:  'e')            
@258 0021	///             0258 [0021]: (   33:  '!')            
@259 025a	///   A_MG_MMV: 0259 [025a]: (  602:  602)            
@25a 0008	///     MG_MMV: 025a [0008]: (    8:    8)            	// MG_MMV length
@25b 006d	///             025b [006d]: (  109:  'm')            
@25c 0079	///             025c [0079]: (  121:  'y')            
@25d 0020	///             025d [0020]: (   32:  ' ')            	// ' '
@25e 006d	///             025e [006d]: (  109:  'm')            
@25f 006f	///             025f [006f]: (  111:  'o')            
@260 0076	///             0260 [0076]: (  118:  'v')            
@261 0065	///             0261 [0065]: (  101:  'e')            
@262 0021	///             0262 [0021]: (   33:  '!')            
@263 0264	///   A_MG_GMO: 0263 [0264]: (  612:  612)            
@264 000a	///     MG_GMO: 0264 [000a]: (   10:   10)            	// MG_GMO length
@265 0067	///             0265 [0067]: (  103:  'g')            
@266 0061	///             0266 [0061]: (   97:  'a')            
@267 006d	///             0267 [006d]: (  109:  'm')            
@268 0065	///             0268 [0065]: (  101:  'e')            
@269 0020	///             0269 [0020]: (   32:  ' ')            	// ' '
@26a 006f	///             026a [006f]: (  111:  'o')            
@26b 0076	///             026b [0076]: (  118:  'v')            
@26c 0065	///             026c [0065]: (  101:  'e')            
@26d 0072	///             026d [0072]: (  114:  'r')            
@26e 0021	///             026e [0021]: (   33:  '!')            
@26f 0270	///   A_MG_YWN: 026f [0270]: (  624:  624)            
@270 0008	///     MG_YWN: 0270 [0008]: (    8:    8)            	// MG_YWN length
@271 0079	///             0271 [0079]: (  121:  'y')            
@272 006f	///             0272 [006f]: (  111:  'o')            
@273 0075	///             0273 [0075]: (  117:  'u')            
@274 0020	///             0274 [0020]: (   32:  ' ')            	// ' '
@275 0077	///             0275 [0077]: (  119:  'w')            
@276 0069	///             0276 [0069]: (  105:  'i')            
@277 006e	///             0277 [006e]: (  110:  'n')            
@278 0021	///             0278 [0021]: (   33:  '!')            
@279 027a	///   A_MG_IWN: 0279 [027a]: (  634:  634)            
@27a 0006	///     MG_IWN: 027a [0006]: (    6:    6)            	// MG_IWN length
@27b 0049	///             027b [0049]: (   73:  'I')            
@27c 0020	///             027c [0020]: (   32:  ' ')            	// ' '
@27d 0077	///             027d [0077]: (  119:  'w')            
@27e 0069	///             027e [0069]: (  105:  'i')            
@27f 006e	///             027f [006e]: (  110:  'n')            
@280 0021	///             0280 [0021]: (   33:  '!')            
@281 0282	///   A_MG_TIE: 0281 [0282]: (  642:  642)            
@282 000d	///     MG_TIE: 0282 [000d]: (   13:   13)            	// MG_TIE length
@283 0069	///             0283 [0069]: (  105:  'i')            
@284 0074	///             0284 [0074]: (  116:  't')            
@285 0027	///             0285 [0027]: (   39:  ''')            
@286 0073	///             0286 [0073]: (  115:  's')            
@287 0020	///             0287 [0020]: (   32:  ' ')            	// ' '
@288 0061	///             0288 [0061]: (   97:  'a')            
@289 0020	///             0289 [0020]: (   32:  ' ')            	// ' '
@28a 0074	///             028a [0074]: (  116:  't')            
@28b 0069	///             028b [0069]: (  105:  'i')            
@28c 0065	///             028c [0065]: (  101:  'e')            
@28d 002e	///             028d [002e]: (   46:  '.')            
@28e 002e	///             028e [002e]: (   46:  '.')            
@28f 002e	///             028f [002e]: (   46:  '.')            
@290 000d	///    MG_IVMV: 0290 [000d]: (   13:   13)            	// MG_IVMV length
@291 0069	///             0291 [0069]: (  105:  'i')            
@292 006e	///             0292 [006e]: (  110:  'n')            
@293 0076	///             0293 [0076]: (  118:  'v')            
@294 0061	///             0294 [0061]: (   97:  'a')            
@295 006c	///             0295 [006c]: (  108:  'l')            
@296 0069	///             0296 [0069]: (  105:  'i')            
@297 0064	///             0297 [0064]: (  100:  'd')            
@298 0020	///             0298 [0020]: (   32:  ' ')            	// ' '
@299 006d	///             0299 [006d]: (  109:  'm')            
@29a 006f	///             029a [006f]: (  111:  'o')            
@29b 0076	///             029b [0076]: (  118:  'v')            
@29c 0065	///             029c [0065]: (  101:  'e')            
@29d 0021	///             029d [0021]: (   33:  '!')            
@29e 0022	///     MG_WHG: 029e [0022]: (   34:  '"')            	// MG_WHG length
@29f 000a	///             029f [000a]: (   10:   10)            	// '\n'
@2a0 0077	///             02a0 [0077]: (  119:  'w')            
@2a1 0068	///             02a1 [0068]: (  104:  'h')            
@2a2 006f	///             02a2 [006f]: (  111:  'o')            
@2a3 0020	///             02a3 [0020]: (   32:  ' ')            	// ' '
@2a4 0067	///             02a4 [0067]: (  103:  'g')            
@2a5 006f	///             02a5 [006f]: (  111:  'o')            
@2a6 0065	///             02a6 [0065]: (  101:  'e')            
@2a7 0073	///             02a7 [0073]: (  115:  's')            
@2a8 0020	///             02a8 [0020]: (   32:  ' ')            	// ' '
@2a9 0066	///             02a9 [0066]: (  102:  'f')            
@2aa 0069	///             02aa [0069]: (  105:  'i')            
@2ab 0072	///             02ab [0072]: (  114:  'r')            
@2ac 0073	///             02ac [0073]: (  115:  's')            
@2ad 0074	///             02ad [0074]: (  116:  't')            
@2ae 003f	///             02ae [003f]: (   63:  '?')            
@2af 0020	///             02af [0020]: (   32:  ' ')            	// ' '
@2b0 0028	///             02b0 [0028]: (   40:  '(')            
@2b1 0030	///             02b1 [0030]: (   48:  '0')            
@2b2 003a	///             02b2 [003a]: (   58:  ':')            
@2b3 0059	///             02b3 [0059]: (   89:  'Y')            
@2b4 004f	///             02b4 [004f]: (   79:  'O')            
@2b5 0055	///             02b5 [0055]: (   85:  'U')            
@2b6 002c	///             02b6 [002c]: (   44:  ',')            
@2b7 0020	///             02b7 [0020]: (   32:  ' ')            	// ' '
@2b8 0031	///             02b8 [0031]: (   49:  '1')            
@2b9 003a	///             02b9 [003a]: (   58:  ':')            
@2ba 004d	///             02ba [004d]: (   77:  'M')            
@2bb 0045	///             02bb [0045]: (   69:  'E')            
@2bc 002c	///             02bc [002c]: (   44:  ',')            
@2bd 0020	///             02bd [0020]: (   32:  ' ')            	// ' '
@2be 0071	///             02be [0071]: (  113:  'q')            
@2bf 0029	///             02bf [0029]: (   41:  ')')            
@2c0 003a	///             02c0 [003a]: (   58:  ':')            
@2c1 0004	///    MG_SEPR: 02c1 [0004]: (    4:    4)            	// MG_SEPR length
@2c2 002d	///             02c2 [002d]: (   45:  '-')            
@2c3 002d	///             02c3 [002d]: (   45:  '-')            
@2c4 002d	///             02c4 [002d]: (   45:  '-')            
@2c5 000a	///             02c5 [000a]: (   10:   10)            	// '\n'
@2c6 02c7	///   A_MG_BRD: 02c6 [02c7]: (  711:  711)            
@2c7 000c	///     MG_BRD: 02c7 [000c]: (   12:   12)            	// MG_BRD length
@2c8 002d	///             02c8 [002d]: (   45:  '-')            
@2c9 002d	///             02c9 [002d]: (   45:  '-')            
@2ca 002d	///             02ca [002d]: (   45:  '-')            
@2cb 000a	///             02cb [000a]: (   10:   10)            	// '\n'
@2cc 002d	///             02cc [002d]: (   45:  '-')            
@2cd 002d	///             02cd [002d]: (   45:  '-')            
@2ce 002d	///             02ce [002d]: (   45:  '-')            
@2cf 000a	///             02cf [000a]: (   10:   10)            	// '\n'
@2d0 002d	///             02d0 [002d]: (   45:  '-')            
@2d1 002d	///             02d1 [002d]: (   45:  '-')            
@2d2 002d	///             02d2 [002d]: (   45:  '-')            
@2d3 000a	///             02d3 [000a]: (   10:   10)            	// '\n'
@2d4 0000	///       P_CW: 02d4 [0000]: (    0:    0)            	// CW pointer
@2d5 02d6	///       A_CW: 02d5 [02d6]: (  726:  726)            
// array for CHK_3 parameter
@2d6 0001	///         CW: 02d6 [0001]: (    1:    1)            	// offset = 1 (0,1,2)
@2d7 0000	///             02d7 [0000]: (    0:    0)            	// pos    = 0 (0,1,2)
@2d8 0001	///             02d8 [0001]: (    1:    1)            	// offset = 1 (3,4,5)
@2d9 0003	///             02d9 [0003]: (    3:    3)            	// pos    = 3 (3,4,5)
@2da 0001	///             02da [0001]: (    1:    1)            	// offset = 1 (6,7,8)
@2db 0006	///             02db [0006]: (    6:    6)            	// pos    = 6 (6,7,8)
@2dc 0003	///             02dc [0003]: (    3:    3)            	// offset = 3 (0,3,6)
@2dd 0000	///             02dd [0000]: (    0:    0)            	// pos    = 0 (0,3,6)
@2de 0003	///             02de [0003]: (    3:    3)            	// offset = 3 (1,4,7)
@2df 0001	///             02df [0001]: (    1:    1)            	// pos    = 1 (1,4,7)
@2e0 0003	///             02e0 [0003]: (    3:    3)            	// offset = 3 (2,5,8)
@2e1 0002	///             02e1 [0002]: (    2:    2)            	// pos    = 2 (2,5,8)
@2e2 0004	///             02e2 [0004]: (    4:    4)            	// offset = 4 (0,4,8)
@2e3 0000	///             02e3 [0000]: (    0:    0)            	// pos    = 0 (0,4,8)
@2e4 0002	///             02e4 [0002]: (    2:    2)            	// offset = 2 (2,4,6)
@2e5 0002	///             02e5 [0002]: (    2:    2)            	// pos    = 2 (2,4,6)
@2e6 0000	///      P_HVD: 02e6 [0000]: (    0:    0)            	// HVD pointer
@2e7 02e8	///      A_HVD: 02e7 [02e8]: (  744:  744)            
@2e8 02f0	///       A_H1: 02e8 [02f0]: (  752:  752)            
@2e9 02f9	///       A_H2: 02e9 [02f9]: (  761:  761)            
@2ea 0302	///       A_V1: 02ea [0302]: (  770:  770)            
@2eb 030b	///       A_V2: 02eb [030b]: (  779:  779)            
@2ec 0314	///       A_D1: 02ec [0314]: (  788:  788)            
@2ed 031d	///       A_D2: 02ed [031d]: (  797:  797)            
@2ee 0326	///       A_D3: 02ee [0326]: (  806:  806)            
@2ef 032b	///       A_D4: 02ef [032b]: (  811:  811)            
@2f0 0001	///         H1: 02f0 [0001]: (    1:    1)            	// ( H1[0] = 1)
@2f1 0002	///             02f1 [0002]: (    2:    2)            	// ( H1[1] = 2)
@2f2 0000	///             02f2 [0000]: (    0:    0)            	// ( H1[2] = 0)
@2f3 0004	///             02f3 [0004]: (    4:    4)            	// ( H1[3] = 4)
@2f4 0005	///             02f4 [0005]: (    5:    5)            	// ( H1[4] = 5)
@2f5 0003	///             02f5 [0003]: (    3:    3)            	// ( H1[5] = 3)
@2f6 0007	///             02f6 [0007]: (    7:    7)            	// ( H1[6] = 7)
@2f7 0008	///             02f7 [0008]: (    8:    8)            	// ( H1[7] = 8)
@2f8 0006	///             02f8 [0006]: (    6:    6)            	// ( H1[8] = 6)
@2f9 0002	///         H2: 02f9 [0002]: (    2:    2)            	// ( H2[0] = 2)
@2fa 0000	///             02fa [0000]: (    0:    0)            	// ( H2[1] = 0)
@2fb 0001	///             02fb [0001]: (    1:    1)            	// ( H2[2] = 1)
@2fc 0005	///             02fc [0005]: (    5:    5)            	// ( H2[3] = 5)
@2fd 0003	///             02fd [0003]: (    3:    3)            	// ( H2[4] = 3)
@2fe 0004	///             02fe [0004]: (    4:    4)            	// ( H2[5] = 4)
@2ff 0008	///             02ff [0008]: (    8:    8)            	// ( H2[6] = 8)
@300 0006	///             0300 [0006]: (    6:    6)            	// ( H2[7] = 6)
@301 0007	///             0301 [0007]: (    7:    7)            	// ( H2[8] = 7)
@302 0003	///         V1: 0302 [0003]: (    3:    3)            	// ( V1[0] = 3)
@303 0004	///             0303 [0004]: (    4:    4)            	// ( V1[1] = 4)
@304 0005	///             0304 [0005]: (    5:    5)            	// ( V1[2] = 5)
@305 0006	///             0305 [0006]: (    6:    6)            	// ( V1[3] = 6)
@306 0007	///             0306 [0007]: (    7:    7)            	// ( V1[4] = 7)
@307 0008	///             0307 [0008]: (    8:    8)            	// ( V1[5] = 8)
@308 0000	///             0308 [0000]: (    0:    0)            	// ( V1[6] = 0)
@309 0001	///             0309 [0001]: (    1:    1)            	// ( V1[7] = 1)
@30a 0002	///             030a [0002]: (    2:    2)            	// ( V1[8] = 2)
@30b 0006	///         V2: 030b [0006]: (    6:    6)            	// ( V2[0] = 6)
@30c 0007	///             030c [0007]: (    7:    7)            	// ( V2[1] = 7)
@30d 0008	///             030d [0008]: (    8:    8)            	// ( V2[2] = 8)
@30e 0000	///             030e [0000]: (    0:    0)            	// ( V2[3] = 0)
@30f 0001	///             030f [0001]: (    1:    1)            	// ( V2[4] = 1)
@310 0002	///             0310 [0002]: (    2:    2)            	// ( V2[5] = 2)
@311 0003	///             0311 [0003]: (    3:    3)            	// ( V2[6] = 3)
@312 0004	///             0312 [0004]: (    4:    4)            	// ( V2[7] = 4)
@313 0005	///             0313 [0005]: (    5:    5)            	// ( V2[8] = 5)
@314 0004	///         D1: 0314 [0004]: (    4:    4)            	// ( D1[0] =  4)
@315 ffff	///             0315 [ffff]: (   -1:65535)            	// ( D1[1] = -1)
@316 0004	///             0316 [0004]: (    4:    4)            	// ( D1[2] =  4)
@317 ffff	///             0317 [ffff]: (   -1:65535)            	// ( D1[3] = -1)
@318 0000	///             0318 [0000]: (    0:    0)            	// ( D1[4] =  0)
@319 ffff	///             0319 [ffff]: (   -1:65535)            	// ( D1[5] = -1)
@31a 0004	///             031a [0004]: (    4:    4)            	// ( D1[6] =  4)
@31b ffff	///             031b [ffff]: (   -1:65535)            	// ( D1[7] = -1)
@31c 0004	///             031c [0004]: (    4:    4)            	// ( D1[8] =  4)
@31d 0008	///         D2: 031d [0008]: (    8:    8)            	// ( D2[0] =  8)
@31e ffff	///             031e [ffff]: (   -1:65535)            	// ( D2[1] = -1)
@31f 0006	///             031f [0006]: (    6:    6)            	// ( D2[2] =  6)
@320 ffff	///             0320 [ffff]: (   -1:65535)            	// ( D2[3] = -1)
@321 0008	///             0321 [0008]: (    8:    8)            	// ( D2[4] =  8)
@322 ffff	///             0322 [ffff]: (   -1:65535)            	// ( D2[5] = -1)
@323 0002	///             0323 [0002]: (    2:    2)            	// ( D2[6] =  2)
@324 ffff	///             0324 [ffff]: (   -1:65535)            	// ( D2[7] = -1)
@325 0000	///             0325 [0000]: (    0:    0)            	// ( D2[8] =  0)
@326 ffff	///         D3: 0326 [ffff]: (   -1:65535)            	// ( D3[0] = -1)
@327 ffff	///             0327 [ffff]: (   -1:65535)            	// ( D3[1] = -1)
@328 ffff	///             0328 [ffff]: (   -1:65535)            	// ( D3[2] = -1)
@329 ffff	///             0329 [ffff]: (   -1:65535)            	// ( D3[3] = -1)
@32a 0002	///             032a [0002]: (    2:    2)            	// ( D3[4] =  2)
@32b ffff	///         D4: 032b [ffff]: (   -1:65535)            	// ( D3[5] = -1)
@32c ffff	///             032c [ffff]: (   -1:65535)            	// ( D3[6] = -1)
@32d ffff	///             032d [ffff]: (   -1:65535)            	// ( D3[7] = -1)
@32e ffff	///             032e [ffff]: (   -1:65535)            	// ( D3[8] = -1)
@32f 0006	///             032f [0006]: (    6:    6)            	// ( D4[4] =  6)
